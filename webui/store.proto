import "steammessages_unified_base.steamclient.proto";
import "steammessages_base.proto";

message CCommunity_GetApps_Request {
	repeated int32 appids = 1;
	optional uint32 language = 2;
}

message CCommunity_GetApps_Response {
	repeated .CCDDBAppDetailCommon apps = 1;
}

message CCommunity_GetAppRichPresenceLocalization_Request {
	optional int32 appid = 1;
	optional string language = 2;
}

message CCommunity_GetAppRichPresenceLocalization_Response {
	optional int32 appid = 1;
	repeated .CCommunity_GetAppRichPresenceLocalization_Response_TokenList token_lists = 2;
}

message CCommunity_GetAppRichPresenceLocalization_Response_Token {
	optional string name = 1;
	optional string value = 2;
}

message CCommunity_GetAppRichPresenceLocalization_Response_TokenList {
	optional string language = 1;
	repeated .CCommunity_GetAppRichPresenceLocalization_Response_Token tokens = 2;
}

message CCommunity_Comment {
	optional fixed64 gidcomment = 1;
	optional fixed64 steamid = 2;
	optional uint32 timestamp = 3;
	optional string text = 4;
	optional int32 upvotes = 5;
	optional bool hidden = 6;
	optional bool hidden_by_user = 7;
	optional bool deleted = 8;
	optional .CMsgIPAddress ipaddress = 9;
	optional int32 total_hidden = 10;
	optional bool upvoted_by_user = 11;
}

message CCommunity_GetCommentThread_Response {
	repeated .CCommunity_Comment comments = 1;
	repeated .CCommunity_Comment deleted_comments = 2;
	optional fixed64 steamid = 3;
	optional fixed64 commentthreadid = 4;
	optional int32 start = 5;
	optional int32 count = 6;
	optional int32 total_count = 7;
	optional int32 upvotes = 8;
	repeated uint32 upvoters = 9;
	optional bool user_subscribed = 10;
	optional bool user_upvoted = 11;
	optional fixed64 answer_commentid = 12;
	optional uint32 answer_actor = 13;
	optional int32 answer_actor_rank = 14;
	optional bool can_post = 15;
}

message CCommunity_PostCommentToThread_Response {
	optional fixed64 gidcomment = 1;
	optional fixed64 commentthreadid = 2;
	optional int32 count = 3;
	optional int32 upvotes = 4;
}

message CCommunity_DeleteCommentFromThread_Response {
}

message CCommunity_RateCommentThread_Response {
	optional uint64 gidcomment = 1;
	optional uint64 commentthreadid = 2;
	optional uint32 count = 3;
	optional uint32 upvotes = 4;
	optional bool has_upvoted = 5;
}

message CCommunity_GetCommentThreadRatings_Response {
	optional uint64 commentthreadid = 1;
	optional uint64 gidcomment = 2;
	optional uint32 upvotes = 3;
	optional bool has_upvoted = 4;
	repeated uint32 upvoter_accountids = 5;
}

message CCommunity_RateClanAnnouncement_Request {
	optional uint64 announcementid = 1;
	optional bool vote_up = 2;
	optional uint32 clan_accountid = 3;
}

message CCommunity_RateClanAnnouncement_Response {
}

message CCommunity_GetClanAnnouncementVoteForUser_Request {
	optional uint64 announcementid = 1;
}

message CCommunity_GetClanAnnouncementVoteForUser_Response {
	optional bool voted_up = 1;
	optional bool voted_down = 2;
}

message CAppPriority {
	optional uint32 priority = 1;
	repeated uint32 appid = 2;
}

message CCommunity_GetUserPartnerEventNews_Response {
	repeated .CClanMatchEventByRange results = 1;
}

message CCommunity_PartnerEventResult {
	optional uint32 clanid = 1;
	optional fixed64 event_gid = 2;
	optional fixed64 announcement_gid = 3;
	optional uint32 appid = 4;
	optional bool possible_takeover = 5;
	optional uint32 rtime32_last_modified = 6 [default = 0];
	optional int32 user_app_priority = 7;
}

message CCommunity_GetBestEventsForUser_Response {
	repeated .CCommunity_PartnerEventResult results = 1;
}

message CCommunity_ClearUserPartnerEventsAppPriorities_Response {
}

message CCommunity_PartnerEventsAppPriority {
	optional uint32 appid = 1;
	optional int32 user_app_priority = 2;
}

message CCommunity_GetUserPartnerEventsAppPriorities_Response {
	repeated .CCommunity_PartnerEventsAppPriority priorities = 1;
}

message CCommunity_ClearSinglePartnerEventsAppPriority_Response {
}

message CCommunity_PartnerEventsShowMoreForApp_Response {
}

message CCommunity_PartnerEventsShowLessForApp_Response {
}

message CCommunity_MarkPartnerEventsForUser_Request {
	repeated .CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking markings = 1;
}

message CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking {
	optional uint32 clanid = 1;
	optional fixed64 event_gid = 2;
	optional int32 display_location = 3 [(description) = "enum"];
	optional bool mark_shown = 4;
	optional bool mark_read = 5;
}

message CCommunity_MarkPartnerEventsForUser_Response {
}

message CCommunity_GetUserPartnerEventViewStatus_Response {
	repeated .CCommunity_GetUserPartnerEventViewStatus_Response_PartnerEvent events = 1;
}

message CCommunity_GetUserPartnerEventViewStatus_Response_PartnerEvent {
	optional fixed64 event_gid = 1;
	optional uint32 last_shown_time = 2;
	optional uint32 last_read_time = 3;
	optional uint32 clan_account_id = 4;
}

message CLoyaltyRewards_GetSummary_Response {
	optional .CLoyaltyRewards_GetSummary_Response_Summary summary = 1;
	optional uint32 timestamp_updated = 2;
	optional uint64 auditid_highwater = 3;
}

message CLoyaltyRewards_GetSummary_Response_Summary {
	optional int64 points = 1;
	optional int64 points_earned = 2;
	optional int64 points_spent = 3;
}

message CLoyaltyRewards_RedeemPoints_Response {
	optional uint64 communityitemid = 1;
	repeated uint64 bundle_community_item_ids = 2;
}

message CLoyaltyRewards_AddReactionToUserReview_Request {
	optional uint64 recommendationid = 1;
	optional int32 reactionid = 2;
}

message CLoyaltyRewards_AddReactionToUserReview_Response {
}

message CLoyaltyRewards_GetEligibleApps_Response {
	repeated .CLoyaltyRewards_GetEligibleApps_Response_EligibleApp apps = 1;
}

message CLoyaltyRewards_GetEligibleApps_Response_EligibleApp {
	optional uint32 appid = 1;
	optional bool has_items_anyone_can_purchase = 2;
	optional bool event_app = 3;
}

message LoyaltyRewardDefinition {
	optional uint32 appid = 1;
	optional uint32 defid = 2;
	optional int32 type = 3 [(description) = "enum"];
	optional int32 community_item_class = 4;
	optional uint32 community_item_type = 5;
	optional int64 point_cost = 6;
	optional uint32 timestamp_created = 7;
	optional uint32 timestamp_updated = 8;
	optional uint32 timestamp_available = 9;
	optional uint32 timestamp_available_end = 14;
	optional int64 quantity = 10;
	optional string internal_description = 11;
	optional bool active = 12;
	optional .LoyaltyRewardDefinition_CommunityItemData community_item_data = 13;
	repeated uint32 bundle_defids = 15;
}

message LoyaltyRewardDefinition_CommunityItemData {
	optional string item_name = 1;
	optional string item_title = 2;
	optional string item_description = 3;
	optional string item_image_small = 4;
	optional string item_image_large = 5;
	optional string item_movie_webm = 6;
	optional string item_movie_mp4 = 7;
	optional bool animated = 8;
	repeated .LoyaltyRewardDefinition_BadgeData badge_data = 9;
}

message LoyaltyRewardDefinition_BadgeData {
	optional int32 level = 1;
	optional string image = 2;
}

message LoyaltyRewardPurchaseBonus {
	optional uint64 bonusid = 1;
	optional uint32 appid = 2;
	optional bool active = 3;
	optional int32 points = 4;
	optional uint32 timestamp_start = 5;
	optional uint32 timestamp_end = 6;
	optional string internal_description = 7;
}

message CLoyaltyRewards_GetActivePurchaseBonuses_Response {
	repeated .LoyaltyRewardPurchaseBonus bonuses = 1;
}

message CLoyaltyRewards_QueryRewardItems_Request {
	repeated uint32 appids = 1;
	optional uint32 time_available = 2;
	repeated int32 community_item_classes = 3;
	optional string language = 4;
	optional int32 count = 5;
	optional string cursor = 6;
	optional int32 sort = 7 [default = 1, (description) = "enum"];
	optional bool sort_descending = 8 [default = true];
	repeated int32 reward_types = 9 [(description) = "enum"];
	repeated int32 excluded_community_item_classes = 10;
}

message CLoyaltyRewards_QueryRewardItems_Response {
	repeated .LoyaltyRewardDefinition definitions = 1;
	optional int32 total_count = 2;
	optional int32 count = 3;
	optional string next_cursor = 4;
}

message CLoyaltyRewards_BatchedQueryRewardItems_Response {
	repeated .CLoyaltyRewards_BatchedQueryRewardItems_Response_Response responses = 1;
}

message CLoyaltyRewards_BatchedQueryRewardItems_Response_Response {
	optional int32 eresult = 1;
	optional .CLoyaltyRewards_QueryRewardItems_Response response = 2;
}

message NotImplemented {
}

service Community {
	rpc GetApps (.CCommunity_GetApps_Request) returns (.CCommunity_GetApps_Response);
	rpc GetAppRichPresenceLocalization (.CCommunity_GetAppRichPresenceLocalization_Request) returns (.CCommunity_GetAppRichPresenceLocalization_Response);
	rpc GetCommentThread (.NotImplemented) returns (.CCommunity_GetCommentThread_Response);
	rpc PostCommentToThread (.NotImplemented) returns (.CCommunity_PostCommentToThread_Response);
	rpc DeleteCommentFromThread (.NotImplemented) returns (.CCommunity_DeleteCommentFromThread_Response);
	rpc RateCommentThread (.NotImplemented) returns (.CCommunity_RateCommentThread_Response);
	rpc GetCommentThreadRatings (.NotImplemented) returns (.CCommunity_GetCommentThreadRatings_Response);
	rpc RateClanAnnouncement (.CCommunity_RateClanAnnouncement_Request) returns (.CCommunity_RateClanAnnouncement_Response);
	rpc GetClanAnnouncementVoteForUser (.CCommunity_GetClanAnnouncementVoteForUser_Request) returns (.CCommunity_GetClanAnnouncementVoteForUser_Response);
	rpc GetUserPartnerEventNews (.NotImplemented) returns (.CCommunity_GetUserPartnerEventNews_Response);
	rpc GetBestEventsForUser (.NotImplemented) returns (.CCommunity_GetBestEventsForUser_Response);
	rpc MarkPartnerEventsForUser (.CCommunity_MarkPartnerEventsForUser_Request) returns (.CCommunity_MarkPartnerEventsForUser_Response);
	rpc GetUserPartnerEventViewStatus (.NotImplemented) returns (.CCommunity_GetUserPartnerEventViewStatus_Response);
	rpc PartnerEventsShowMoreForApp (.NotImplemented) returns (.CCommunity_PartnerEventsShowMoreForApp_Response);
	rpc PartnerEventsShowLessForApp (.NotImplemented) returns (.CCommunity_PartnerEventsShowLessForApp_Response);
	rpc ClearUserPartnerEventsAppPriorities (.NotImplemented) returns (.CCommunity_ClearUserPartnerEventsAppPriorities_Response);
	rpc GetUserPartnerEventsAppPriorities (.NotImplemented) returns (.CCommunity_GetUserPartnerEventsAppPriorities_Response);
	rpc ClearSinglePartnerEventsAppPriority (.NotImplemented) returns (.CCommunity_ClearSinglePartnerEventsAppPriority_Response);
}

service LoyaltyRewards {
	rpc GetSummary (.NotImplemented) returns (.CLoyaltyRewards_GetSummary_Response);
	rpc RedeemPoints (.NotImplemented) returns (.CLoyaltyRewards_RedeemPoints_Response);
	rpc RedeemPointsForBadgeLevel (.NotImplemented) returns (.CLoyaltyRewards_RedeemPoints_Response);
	rpc RedeemPointsToUpgradeItem (.NotImplemented) returns (.CLoyaltyRewards_RedeemPoints_Response);
	rpc AddReactionToUserReview (.CLoyaltyRewards_AddReactionToUserReview_Request) returns (.CLoyaltyRewards_AddReactionToUserReview_Response);
	rpc GetEligibleApps (.NotImplemented) returns (.CLoyaltyRewards_GetEligibleApps_Response);
	rpc GetActivePurchaseBonuses (.NotImplemented) returns (.CLoyaltyRewards_GetActivePurchaseBonuses_Response);
	rpc QueryRewardItems (.CLoyaltyRewards_QueryRewardItems_Request) returns (.CLoyaltyRewards_QueryRewardItems_Response);
	rpc BatchedQueryRewardItems (.NotImplemented) returns (.CLoyaltyRewards_BatchedQueryRewardItems_Response);
}

