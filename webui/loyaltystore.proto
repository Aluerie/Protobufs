import "steammessages_unified_base.steamclient.proto";

message CQuest_CommunityItem {
	optional uint64 communityitemid = 1;
	optional uint32 item_type = 2;
	optional uint32 appid = 3;
	optional uint32 owner = 4;
	repeated .CQuest_CommunityItem_Attribute attributes = 5;
	optional bool used = 6;
	optional uint32 owner_origin = 7;
	optional int64 amount = 8;
}

message CQuest_CommunityItem_Attribute {
	optional uint32 attributeid = 1;
	optional uint64 value = 2;
}

message CQuest_GetCommunityInventory_Request {
	repeated uint32 filter_appids = 1;
}

message CQuest_GetCommunityInventory_Response {
	repeated .CQuest_CommunityItem items = 1;
}

message CQuest_GetCommunityItemDefinitions_Response {
	repeated .CQuest_GetCommunityItemDefinitions_Response_ItemDefinition item_definitions = 1;
}

message CQuest_GetCommunityItemDefinitions_Response_ItemDefinition {
	optional uint32 item_type = 1;
	optional uint32 appid = 2;
	optional string item_name = 3;
	optional string item_title = 4;
	optional string item_description = 5;
	optional string item_image_small = 6;
	optional string item_image_large = 7;
	optional string item_key_values = 8;
	optional uint32 item_series = 9;
	optional uint32 item_class = 10;
	optional uint32 editor_accountid = 11;
	optional bool active = 12;
	optional string item_image_composed = 13;
	optional string item_image_composed_foil = 14;
	optional bool deleted = 15;
	optional uint32 item_last_changed = 16;
	optional uint64 broadcast_channel_id = 17;
	optional string item_movie_webm = 18;
	optional string item_movie_mp4 = 19;
	optional string item_movie_webm_small = 20;
	optional string item_movie_mp4_small = 21;
}

message CQuest_ActivateProfileModifierItem_Request {
	optional uint32 appid = 1;
	optional uint64 communityitemid = 2;
	optional bool activate = 3;
}

message CQuest_ActivateProfileModifierItem_Response {
}

message CSummerSale2020_ClaimItem_Response {
	optional string item_name = 1;
	optional string item_title = 2;
	optional string item_description = 3;
	optional string item_image_small = 4;
	optional string item_image_large = 5;
	optional bool animated = 6;
	optional uint64 communityitemid = 7;
}

message CSummerSale2020_CanClaimItem_Response {
	optional bool can_claim = 1;
	optional string item_name = 2;
	optional string item_title = 3;
	optional string item_description = 4;
	optional string item_image_small = 5;
	optional string item_image_large = 6;
	optional bool animated = 7;
	optional uint64 communityitemid = 8;
}

message CAuction_Bid {
	optional uint32 accountid = 1;
	optional uint64 auctiondescriptionid = 2;
	optional int32 state = 3 [(description) = "enum"];
	optional uint32 time_created = 4;
	optional uint32 time_updated = 5;
	optional int64 amount_bid = 6;
	optional int64 amount_paid = 7;
	optional int64 auctionbidid = 8;
}

message CAuction_Item {
	optional uint64 auctiondescriptionid = 1;
	optional uint32 time_start = 2;
	optional uint32 time_end = 3;
	optional int64 amount_total = 5;
	optional int64 amount_remaining = 6;
	optional int64 highest_amount = 7;
	optional uint32 highest_bidder_accountid = 8;
	optional uint32 community_item_appid = 9;
	optional uint32 community_item_type = 10;
	optional uint32 store_appid = 11;
	repeated uint32 store_packageids = 12;
	optional int64 reserve_price = 13;
}

message CAuction_PlaceBid_Response {
}

message CAuction_CancelBid_Response {
	optional int64 amount_returned = 1;
}

message CAuction_GetBidsForUser_Response {
	repeated .CAuction_Bid bids = 1;
}

message CAuction_GetBidsForItem_Response {
	optional .CAuction_Item item = 1;
	optional int32 count_total = 2;
	optional int32 current_user_position = 3;
	repeated .CAuction_Bid winning_bids = 4;
}

message CAuction_GetUserBidForItem_Response {
	optional .CAuction_Bid bid = 1;
}

message CAuction_GetItemDetails_Response {
	optional .CAuction_Item item = 1;
}

message CAuction_GetAllItems_Response {
	repeated .CAuction_Item items = 1;
}

message NotImplemented {
}

service Quest {
	rpc GetCommunityInventory (.CQuest_GetCommunityInventory_Request) returns (.CQuest_GetCommunityInventory_Response);
	rpc GetCommunityItemDefinitions (.NotImplemented) returns (.CQuest_GetCommunityItemDefinitions_Response);
	rpc ActivateProfileModifierItem (.CQuest_ActivateProfileModifierItem_Request) returns (.CQuest_ActivateProfileModifierItem_Response);
}

service SummerSale2020 {
	rpc ClaimItem (.NotImplemented) returns (.CSummerSale2020_ClaimItem_Response);
	rpc CanClaimItem (.NotImplemented) returns (.CSummerSale2020_CanClaimItem_Response);
}

service Auction {
	rpc PlaceBid (.NotImplemented) returns (.CAuction_PlaceBid_Response);
	rpc CancelBid (.NotImplemented) returns (.CAuction_CancelBid_Response);
	rpc GetBidsForUser (.NotImplemented) returns (.CAuction_GetBidsForUser_Response);
	rpc GetBidsForItem (.NotImplemented) returns (.CAuction_GetBidsForItem_Response);
	rpc GetUserBidForItem (.NotImplemented) returns (.CAuction_GetUserBidForItem_Response);
	rpc GetItemDetails (.NotImplemented) returns (.CAuction_GetItemDetails_Response);
	rpc GetAllItems (.NotImplemented) returns (.CAuction_GetAllItems_Response);
}

