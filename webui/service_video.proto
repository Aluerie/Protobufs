import "common_base.proto";

message CVideo_BeginGameClipSegmentsUpload_Request {
	optional uint64 clip_id = 1;
	optional string component_name = 2;
	optional string representation_name = 3;
	repeated .CVideo_GameClipSegmentInfo segments_to_store = 4;
}

message CVideo_BeginGameClipSegmentsUpload_Response {
	repeated .CVideo_GameClipSegmentUploadInfo segments_needed = 1;
	optional bool call_again = 2;
}

message CVideo_ClientGetVideoURL_Request {
	optional uint64 video_id = 1;
	optional uint32 client_cellid = 2;
}

message CVideo_ClientGetVideoURL_Response {
	optional uint64 video_id = 1;
	optional string video_url = 2;
}

message CVideo_CommitGameClipSegmentsUpload_Request {
	optional uint64 clip_id = 1;
	optional string component_name = 2;
	optional string representation_name = 3;
	optional uint32 first_segment_number = 4;
	optional uint32 num_segments = 5;
	optional uint32 upload_result = 6;
}

message CVideo_CommitGameClipSegmentsUpload_Response {
}

message CVideo_CreateGameClip_Request {
	optional uint32 app_id = 1;
	optional uint32 num_segments = 2;
	optional uint32 length_milliseconds = 3;
	optional uint32 segment_duration_timescale = 4;
	optional uint32 segment_duration = 5;
	repeated .CVideo_GameClipComponent components = 6;
}

message CVideo_CreateGameClip_Response {
	optional uint64 clip_id = 1;
}

message CVideo_GameClipComponent {
	optional string component_name = 1;
	optional uint32 contents = 2;
	optional uint32 segment_size = 3;
	optional string file_type = 4;
	repeated .CVideo_GameClipRepresentation representations = 5;
}

message CVideo_GameClipRepresentation {
	optional string representation_name = 2;
	optional uint32 horizontal_resolution = 3;
	optional uint32 vertical_resolution = 4;
	optional double frame_rate = 5;
	optional uint32 bandwidth = 6;
	optional uint32 audio_sample_rate = 7;
	optional string frame_rate_string = 8;
	optional string codec = 9;
	optional uint32 audio_channel_config = 10;
}

message CVideo_GameClipSegmentInfo {
	optional uint32 segment_number = 4;
	optional uint64 segment_size_bytes = 5;
}

message CVideo_GameClipSegmentUploadInfo {
	optional .CVideo_GameClipSegmentInfo segment_info = 1;
	optional string url_host = 2;
	optional string url_path = 3;
	optional bool use_https = 4;
	repeated .CVideo_GameClipSegmentUploadInfo_HTTPHeaders request_headers = 5;
}

message CVideo_GameClipSegmentUploadInfo_HTTPHeaders {
	optional string name = 1;
	optional string value = 2;
}

message CVideo_GetVideoBookmarks_Request {
	repeated uint32 appids = 1;
	optional uint32 updated_since = 2;
}

message CVideo_GetVideoBookmarks_Response {
	repeated .VideoBookmark bookmarks = 1;
}

message CVideo_SetVideoBookmark_Notification {
	repeated .VideoBookmark bookmarks = 1;
}

message CVideo_UnlockedH264_Notification {
	optional bytes encryption_key = 1;
}

message VideoBookmark {
	optional uint32 app_id = 1;
	optional uint32 playback_position_in_seconds = 2;
	optional uint64 video_track_id = 3;
	optional uint64 audio_track_id = 4;
	optional uint64 timedtext_track_id = 5;
	optional uint32 last_modified = 6;
	optional bool hide_from_watch_history = 7 [default = false];
	optional bool hide_from_library = 8 [default = false];
}

service Video {
	rpc BeginGameClipSegmentsUpload (.CVideo_BeginGameClipSegmentsUpload_Request) returns (.CVideo_BeginGameClipSegmentsUpload_Response);
	rpc ClientGetVideoURL (.CVideo_ClientGetVideoURL_Request) returns (.CVideo_ClientGetVideoURL_Response);
	rpc CommitGameClipSegmentsUpload (.CVideo_CommitGameClipSegmentsUpload_Request) returns (.CVideo_CommitGameClipSegmentsUpload_Response);
	rpc CreateGameClip (.CVideo_CreateGameClip_Request) returns (.CVideo_CreateGameClip_Response);
	rpc GetVideoBookmarks (.CVideo_GetVideoBookmarks_Request) returns (.CVideo_GetVideoBookmarks_Response);
	rpc SetVideoBookmark (.CVideo_SetVideoBookmark_Notification) returns (.NoResponse);
}

service VideoClient {
	rpc NotifyUnlockedH264 (.CVideo_UnlockedH264_Notification) returns (.NoResponse);
}

