package xla;

enum PrimitiveType {
	PRIMITIVE_TYPE_INVALID = 0;
	PRED = 1;
	S8 = 2;
	S16 = 3;
	S32 = 4;
	S64 = 5;
	U8 = 6;
	U16 = 7;
	U32 = 8;
	U64 = 9;
	F16 = 10;
	F32 = 11;
	BF16 = 16;
	F64 = 12;
	C64 = 15;
	TUPLE = 13;
	OPAQUE = 14;
}

enum PaddingValue {
	INVALID_PAD = 0;
	ZERO_PAD = 1;
	ONE_PAD = 2;
	LOWEST_PAD = 3;
	HIGHEST_PAD = 4;
	UNKNOWN_PAD = 5;
}

enum FftType {
	FFT = 0;
	IFFT = 1;
	RFFT = 2;
	IRFFT = 3;
}

enum UnaryOperation {
	UNOP_INVALID = 0;
	UNOP_NOT = 1;
	UNOP_EXP = 2;
	UNOP_NEGATE = 3;
	UNOP_SORT = 4;
	UNOP_TANH = 5;
	UNOP_LOG = 6;
	UNOP_FLOOR = 7;
	UNOP_CEIL = 8;
	UNOP_ABS = 9;
	UNOP_SIGN = 10;
	UNOP_IS_FINITE = 11;
	UNOP_COS = 12;
	UNOP_SIN = 13;
	UNOP_ROUND_NEAREST_AFZ = 14;
	UNOP_REAL = 15;
	UNOP_IMAG = 16;
}

enum BinaryOperation {
	BINOP_INVALID = 0;
	BINOP_ADD = 1;
	BINOP_DIV = 2;
	BINOP_MUL = 3;
	BINOP_SUB = 4;
	BINOP_EQ = 5;
	BINOP_GE = 6;
	BINOP_GT = 7;
	BINOP_LE = 8;
	BINOP_LT = 9;
	BINOP_NE = 10;
	BINOP_DOT = 12;
	BINOP_MAX = 14;
	BINOP_MIN = 15;
	BINOP_POW = 16;
	BINOP_REM = 17;
	BINOP_AND = 18;
	BINOP_OR = 19;
	BINOP_SHIFT_LEFT = 20;
	BINOP_SHIFT_RIGHT_ARITHMETIC = 21;
	BINOP_SHIFT_RIGHT_LOGICAL = 22;
	BINOP_COMPLEX = 23;
	BINOP_ATAN2 = 24;
}

enum RandomDistribution {
	RNG_INVALID = 0;
	RNG_UNIFORM = 1;
	RNG_NORMAL = 2;
	RNG_BERNOULLI = 3;
}

enum TernaryOperation {
	TRIOP_INVALID = 0;
	TRIOP_SELECT = 1;
	TRIOP_CLAMP = 3;
}

enum VariadicOperation {
	VAROP_INVALID = 0;
	VAROP_TUPLE = 1;
}

message PaddingConfig {
	message PaddingConfigDimension {
		optional int64 edge_padding_low = 1;
		optional int64 edge_padding_high = 2;
		optional int64 interior_padding = 3;
	}

	repeated .xla.PaddingConfig.PaddingConfigDimension dimensions = 1;
}

message Layout {
	repeated int64 minor_to_major = 1;
	repeated int64 padded_dimensions = 2;
	optional .xla.PaddingValue padding_value = 3 [default = INVALID_PAD];
}

message Shape {
	optional .xla.PrimitiveType element_type = 2 [default = PRIMITIVE_TYPE_INVALID];
	repeated int64 dimensions = 3;
	repeated .xla.Shape tuple_shapes = 4;
	optional .xla.Layout layout = 5;
}

message ProgramShape {
	repeated .xla.Shape parameters = 1;
	optional .xla.Shape result = 2;
	repeated string parameter_names = 3;
}

message ComputationStats {
	optional double flop_count = 1;
	optional double transcendental_count = 2;
}

message OpMetadata {
	optional string op_type = 1;
	optional string op_name = 2;
	optional string source_file = 3;
	optional int32 source_line = 4;
}

message ExecutionProfile {
	optional bool compilation_cache_hit = 1;
	optional int64 compile_time_ms = 2;
	optional int64 compute_cycle_count = 3;
	optional int64 compute_time_ns = 4;
	optional int64 compute_and_transfer_time_ns = 5;
}

message ComputationHandle {
	optional int64 handle = 1;
}

message ExecutionHandle {
	optional int64 handle = 1;
}

message GlobalDataHandle {
	optional int64 handle = 1;
}

message ComputationDataHandle {
	optional int64 handle = 1;
}

message DeviceHandle {
	optional int64 handle = 1;
	optional int64 device_count = 2;
}

message ChannelHandle {
	optional int64 handle = 1;
}

message DeviceAssignmentProto {
	message ComputationDevice {
		repeated int32 replica_device_ids = 1;
	}

	optional int32 replica_count = 1;
	optional int32 computation_count = 2;
	repeated .xla.DeviceAssignmentProto.ComputationDevice computation_devices = 3;
}

message LiteralProto {
	optional .xla.Shape shape = 1;
	repeated bool preds = 2;
	optional bytes u8s = 3;
	repeated int32 s32s = 4;
	repeated int64 s64s = 5;
	repeated uint32 u32s = 6;
	repeated uint64 u64s = 7;
	repeated float f32s = 8;
	repeated double f64s = 9;
	repeated float c64s = 12;
	repeated .xla.LiteralProto tuple_literals = 10;
	optional bytes f16s = 11;
	optional bytes bf16s = 13;
}

message WindowDimension {
	optional int64 size = 1;
	optional int64 stride = 2;
	optional int64 padding_low = 3;
	optional int64 padding_high = 4;
	optional int64 window_dilation = 5;
	optional int64 base_dilation = 6;
}

message Window {
	repeated .xla.WindowDimension dimensions = 1;
}

message ConstantRequest {
	optional .xla.LiteralProto literal = 2;
}

message GetTupleElementRequest {
	optional .xla.ComputationDataHandle operand = 2;
	optional int64 index = 3;
}

message SliceRequest {
	optional .xla.ComputationDataHandle operand = 2;
	repeated int64 start_indices = 3;
	repeated int64 limit_indices = 4;
	repeated int64 strides = 5;
}

message DynamicSliceRequest {
	optional .xla.ComputationDataHandle operand = 2;
	optional .xla.ComputationDataHandle start_indices = 3;
	repeated int64 slice_sizes = 4;
}

message DynamicUpdateSliceRequest {
	optional .xla.ComputationDataHandle operand = 2;
	optional .xla.ComputationDataHandle update = 3;
	optional .xla.ComputationDataHandle start_indices = 4;
}

message ConvolutionDimensionNumbers {
	optional int64 input_batch_dimension = 7;
	optional int64 input_feature_dimension = 8;
	optional int64 output_batch_dimension = 9;
	optional int64 output_feature_dimension = 10;
	repeated int64 spatial_dimensions = 5;
	optional int64 kernel_input_feature_dimension = 3;
	optional int64 kernel_output_feature_dimension = 4;
	repeated int64 kernel_spatial_dimensions = 6;
}

message ConvolveRequest {
	optional .xla.ComputationDataHandle lhs = 2;
	optional .xla.ComputationDataHandle rhs = 3;
	optional .xla.Window window = 4;
	optional .xla.ConvolutionDimensionNumbers dimension_numbers = 5;
}

message FftRequest {
	optional .xla.FftType fft_type = 1 [default = FFT];
	repeated int64 fft_length = 2;
	optional .xla.ComputationDataHandle operand = 3;
}

message InfeedRequest {
	optional .xla.Shape shape = 2;
	optional bytes config = 3;
}

message OutfeedRequest {
	optional .xla.Shape shape = 1;
	optional .xla.ComputationDataHandle operand = 2;
	optional bytes outfeed_config = 3;
}

message CallRequest {
	optional .xla.ComputationHandle to_apply = 2;
	repeated .xla.ComputationDataHandle operands = 3;
}

message CustomCallRequest {
	optional string call_target_name = 2;
	repeated .xla.ComputationDataHandle operands = 3;
	optional .xla.Shape shape = 4;
}

message MapRequest {
	repeated .xla.ComputationDataHandle operands = 2;
	optional .xla.ComputationHandle to_apply = 3;
	repeated .xla.ComputationDataHandle static_operands = 4;
	repeated int64 dimensions = 5;
}

message ReduceRequest {
	optional .xla.ComputationDataHandle operand = 2;
	optional .xla.ComputationDataHandle init_value = 3;
	repeated int64 dimensions = 4;
	optional .xla.ComputationHandle to_apply = 5;
}

message ReduceWindowRequest {
	optional .xla.ComputationDataHandle operand = 2;
	optional .xla.ComputationDataHandle init_value = 3;
	optional .xla.Window window = 4;
	optional .xla.ComputationHandle to_apply = 5;
}

message BatchNormTrainingRequest {
	optional .xla.ComputationDataHandle operand = 1;
	optional .xla.ComputationDataHandle scale = 2;
	optional .xla.ComputationDataHandle offset = 3;
	optional float epsilon = 4;
	optional int64 feature_index = 5;
}

message BatchNormInferenceRequest {
	optional .xla.ComputationDataHandle operand = 1;
	optional .xla.ComputationDataHandle scale = 2;
	optional .xla.ComputationDataHandle offset = 3;
	optional .xla.ComputationDataHandle mean = 4;
	optional .xla.ComputationDataHandle variance = 5;
	optional float epsilon = 6;
	optional int64 feature_index = 7;
}

message BatchNormGradRequest {
	optional .xla.ComputationDataHandle operand = 1;
	optional .xla.ComputationDataHandle scale = 2;
	optional .xla.ComputationDataHandle mean = 3;
	optional .xla.ComputationDataHandle variance = 4;
	optional .xla.ComputationDataHandle grad_output = 5;
	optional float epsilon = 6;
	optional int64 feature_index = 7;
}

message CrossReplicaSumRequest {
	optional .xla.ComputationDataHandle operand = 2;
}

message SelectAndScatterRequest {
	optional .xla.ComputationDataHandle operand = 2;
	optional .xla.ComputationDataHandle source = 3;
	optional .xla.ComputationDataHandle init_value = 4;
	optional .xla.Window window = 5;
	optional .xla.ComputationHandle select = 6;
	optional .xla.ComputationHandle scatter = 7;
}

message ReverseRequest {
	optional .xla.ComputationDataHandle operand = 2;
	repeated int64 dimensions = 3;
}

message BroadcastRequest {
	optional .xla.ComputationDataHandle operand = 2;
	repeated int64 broadcast_sizes = 3;
}

message PadRequest {
	optional .xla.ComputationDataHandle operand = 2;
	optional .xla.ComputationDataHandle padding_value = 3;
	optional .xla.PaddingConfig padding_config = 4;
}

message ReshapeRequest {
	optional .xla.ComputationDataHandle operand = 2;
	repeated int64 dimensions = 3;
	repeated int64 new_sizes = 4;
}

message TransposeRequest {
	optional .xla.ComputationDataHandle operand = 2;
	repeated int64 dimensions = 3;
}

message ParameterRequest {
	optional .xla.Shape shape = 2;
	optional int64 parameter = 3;
	optional string name = 4;
}

message GetLocalShapeRequest {
	optional .xla.ComputationHandle computation = 1;
	optional .xla.ComputationDataHandle operand = 2;
}

message GetLocalShapeResponse {
	optional .xla.Shape shape = 1;
}

message TraceRequest {
	optional string tag = 2;
	optional .xla.ComputationDataHandle operand = 3;
}

message ConvertRequest {
	optional .xla.ComputationDataHandle operand = 2;
	optional .xla.PrimitiveType new_element_type = 3 [default = PRIMITIVE_TYPE_INVALID];
}

message ConcatenateRequest {
	repeated .xla.ComputationDataHandle operands = 2;
	optional int64 dimension = 3;
}

message WhileRequest {
	optional .xla.ComputationHandle condition = 2;
	optional .xla.ComputationHandle body = 3;
	optional .xla.ComputationDataHandle init = 4;
}

message UnaryOpRequest {
	optional .xla.UnaryOperation unop = 2 [default = UNOP_INVALID];
	optional .xla.ComputationDataHandle operand = 3;
}

message BinaryOpRequest {
	optional .xla.BinaryOperation binop = 2 [default = BINOP_INVALID];
	optional .xla.ComputationDataHandle lhs = 3;
	optional .xla.ComputationDataHandle rhs = 4;
	repeated int64 broadcast_dimensions = 5;
}

message RngRequest {
	optional .xla.RandomDistribution distribution = 2 [default = RNG_INVALID];
	repeated .xla.ComputationDataHandle parameter = 3;
	optional .xla.Shape shape = 4;
}

message TernaryOpRequest {
	optional .xla.TernaryOperation triop = 2 [default = TRIOP_INVALID];
	optional .xla.ComputationDataHandle lhs = 3;
	optional .xla.ComputationDataHandle rhs = 4;
	optional .xla.ComputationDataHandle ehs = 5;
}

message VariadicOpRequest {
	optional .xla.VariadicOperation varop = 2 [default = VAROP_INVALID];
	repeated .xla.ComputationDataHandle operands = 3;
}

message ReducePrecisionRequest {
	optional .xla.ComputationDataHandle operand = 1;
	optional int32 exponent_bits = 2;
	optional int32 mantissa_bits = 3;
}

message SendRequest {
	optional .xla.ComputationDataHandle operand = 1;
	optional .xla.ChannelHandle channel_handle = 2;
}

message RecvRequest {
	optional .xla.Shape shape = 1;
	optional .xla.ChannelHandle channel_handle = 2;
}

message OpSharding {
	enum Type {
		REPLICATED = 0;
		MAXIMAL = 1;
		TUPLE = 2;
		OTHER = 3;
	}

	optional .xla.OpSharding.Type type = 1 [default = REPLICATED];
	optional .xla.Shape tile_shape = 2;
	repeated int64 tile_assignment_dimensions = 3;
	repeated int64 tile_assignment_devices = 4;
	repeated .xla.OpSharding tuple_shardings = 5;
}

message OpRequest {
	optional .xla.ComputationHandle computation = 1;
	optional .xla.OpMetadata metadata = 33;
	optional .xla.OpSharding sharding = 40;
	oneof op {
		.xla.BinaryOpRequest binary_op_request = 2;
		.xla.BroadcastRequest broadcast_request = 3;
		.xla.CallRequest call_request = 4;
		.xla.ConcatenateRequest concatenate_request = 5;
		.xla.ConstantRequest constant_request = 6;
		.xla.ConvertRequest convert_request = 7;
		.xla.ConvolveRequest convolve_request = 8;
		.xla.CrossReplicaSumRequest cross_replica_sum_request = 9;
		.xla.CustomCallRequest custom_call_request = 10;
		.xla.DynamicSliceRequest dynamic_slice_request = 11;
		.xla.DynamicUpdateSliceRequest dynamic_update_slice_request = 12;
		.xla.GetTupleElementRequest get_tuple_element_request = 13;
		.xla.InfeedRequest infeed_request = 14;
		.xla.MapRequest map_request = 15;
		.xla.PadRequest pad_request = 16;
		.xla.ParameterRequest parameter_request = 17;
		.xla.ReducePrecisionRequest reduce_precision_request = 36;
		.xla.ReduceRequest reduce_request = 18;
		.xla.ReduceWindowRequest reduce_window_request = 19;
		.xla.ReshapeRequest reshape_request = 20;
		.xla.ReverseRequest reverse_request = 21;
		.xla.RngRequest rng_request = 22;
		.xla.SelectAndScatterRequest select_and_scatter_request = 23;
		.xla.SliceRequest slice_request = 24;
		.xla.TernaryOpRequest ternary_op_request = 25;
		.xla.TraceRequest trace_request = 26;
		.xla.TransposeRequest transpose_request = 34;
		.xla.UnaryOpRequest unary_op_request = 27;
		.xla.VariadicOpRequest variadic_op_request = 28;
		.xla.WhileRequest while_request = 29;
		.xla.SendRequest send_request = 30;
		.xla.RecvRequest recv_request = 31;
		.xla.OutfeedRequest outfeed_request = 32;
		.xla.BatchNormTrainingRequest batch_norm_training_request = 35;
		.xla.BatchNormGradRequest batch_norm_grad_request = 37;
		.xla.BatchNormInferenceRequest batch_norm_inference_request = 38;
		.xla.FftRequest fft_request = 41;
	}
}

message OpResponse {
	optional .xla.ComputationDataHandle output = 1;
}

