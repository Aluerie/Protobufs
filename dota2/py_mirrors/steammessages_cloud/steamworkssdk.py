# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: steammessages_cloud.steamworkssdk.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import List

import betterproto
import grpclib


@dataclass
class CCloud_GetUploadServerInfo_Request(betterproto.Message):
    appid: int = betterproto.uint32_field(1)


@dataclass
class CCloud_GetUploadServerInfo_Response(betterproto.Message):
    server_url: str = betterproto.string_field(1)


@dataclass
class CCloud_GetFileDetails_Request(betterproto.Message):
    ugcid: int = betterproto.uint64_field(1)
    appid: int = betterproto.uint32_field(2)


@dataclass
class CCloud_UserFile(betterproto.Message):
    appid: int = betterproto.uint32_field(1)
    ugcid: int = betterproto.uint64_field(2)
    filename: str = betterproto.string_field(3)
    timestamp: int = betterproto.uint64_field(4)
    file_size: int = betterproto.uint32_field(5)
    url: str = betterproto.string_field(6)
    steamid_creator: float = betterproto.fixed64_field(7)


@dataclass
class CCloud_GetFileDetails_Response(betterproto.Message):
    details: "CCloud_UserFile" = betterproto.message_field(1)


@dataclass
class CCloud_EnumerateUserFiles_Request(betterproto.Message):
    appid: int = betterproto.uint32_field(1)
    extended_details: bool = betterproto.bool_field(2)
    count: int = betterproto.uint32_field(3)
    start_index: int = betterproto.uint32_field(4)


@dataclass
class CCloud_EnumerateUserFiles_Response(betterproto.Message):
    files: List["CCloud_UserFile"] = betterproto.message_field(1)
    total_files: int = betterproto.uint32_field(2)


@dataclass
class CCloud_Delete_Request(betterproto.Message):
    filename: str = betterproto.string_field(1)
    appid: int = betterproto.uint32_field(2)


@dataclass
class CCloud_Delete_Response(betterproto.Message):
    pass


class CloudStub(betterproto.ServiceStub):
    async def get_upload_server_info(
        self, *, appid: int = 0
    ) -> CCloud_GetUploadServerInfo_Response:
        request = CCloud_GetUploadServerInfo_Request()
        request.appid = appid

        return await self._unary_unary(
            "/.Cloud/GetUploadServerInfo",
            request,
            CCloud_GetUploadServerInfo_Response,
        )

    async def get_file_details(
        self, *, ugcid: int = 0, appid: int = 0
    ) -> CCloud_GetFileDetails_Response:
        request = CCloud_GetFileDetails_Request()
        request.ugcid = ugcid
        request.appid = appid

        return await self._unary_unary(
            "/.Cloud/GetFileDetails",
            request,
            CCloud_GetFileDetails_Response,
        )

    async def enumerate_user_files(
        self,
        *,
        appid: int = 0,
        extended_details: bool = False,
        count: int = 0,
        start_index: int = 0,
    ) -> CCloud_EnumerateUserFiles_Response:
        request = CCloud_EnumerateUserFiles_Request()
        request.appid = appid
        request.extended_details = extended_details
        request.count = count
        request.start_index = start_index

        return await self._unary_unary(
            "/.Cloud/EnumerateUserFiles",
            request,
            CCloud_EnumerateUserFiles_Response,
        )

    async def delete(
        self, *, filename: str = "", appid: int = 0
    ) -> CCloud_Delete_Response:
        request = CCloud_Delete_Request()
        request.filename = filename
        request.appid = appid

        return await self._unary_unary(
            "/.Cloud/Delete",
            request,
            CCloud_Delete_Response,
        )
