# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: steammessages_publishedfile.steamworkssdk.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import List

import betterproto
import grpclib


@dataclass
class CPublishedFile_Subscribe_Request(betterproto.Message):
    publishedfileid: int = betterproto.uint64_field(1)
    list_type: int = betterproto.uint32_field(2)
    appid: int = betterproto.int32_field(3)
    notify_client: bool = betterproto.bool_field(4)


@dataclass
class CPublishedFile_Subscribe_Response(betterproto.Message):
    pass


@dataclass
class CPublishedFile_Unsubscribe_Request(betterproto.Message):
    publishedfileid: int = betterproto.uint64_field(1)
    list_type: int = betterproto.uint32_field(2)
    appid: int = betterproto.int32_field(3)
    notify_client: bool = betterproto.bool_field(4)


@dataclass
class CPublishedFile_Unsubscribe_Response(betterproto.Message):
    pass


@dataclass
class CPublishedFile_Publish_Request(betterproto.Message):
    appid: int = betterproto.uint32_field(1)
    consumer_appid: int = betterproto.uint32_field(2)
    cloudfilename: str = betterproto.string_field(3)
    preview_cloudfilename: str = betterproto.string_field(4)
    title: str = betterproto.string_field(5)
    file_description: str = betterproto.string_field(6)
    file_type: int = betterproto.uint32_field(7)
    consumer_shortcut_name: str = betterproto.string_field(8)
    youtube_username: str = betterproto.string_field(9)
    youtube_videoid: str = betterproto.string_field(10)
    visibility: int = betterproto.uint32_field(11)
    redirect_uri: str = betterproto.string_field(12)
    tags: List[str] = betterproto.string_field(13)
    collection_type: str = betterproto.string_field(14)
    game_type: str = betterproto.string_field(15)
    url: str = betterproto.string_field(16)


@dataclass
class CPublishedFile_Publish_Response(betterproto.Message):
    publishedfileid: int = betterproto.uint64_field(1)
    redirect_uri: str = betterproto.string_field(2)


@dataclass
class CPublishedFile_GetDetails_Request(betterproto.Message):
    publishedfileids: List[float] = betterproto.fixed64_field(1)
    includetags: bool = betterproto.bool_field(2)
    includeadditionalpreviews: bool = betterproto.bool_field(3)
    includechildren: bool = betterproto.bool_field(4)
    includekvtags: bool = betterproto.bool_field(5)
    includevotes: bool = betterproto.bool_field(6)
    short_description: bool = betterproto.bool_field(8)


@dataclass
class PublishedFileDetails(betterproto.Message):
    result: int = betterproto.uint32_field(1)
    publishedfileid: int = betterproto.uint64_field(2)
    creator: float = betterproto.fixed64_field(3)
    creator_appid: int = betterproto.uint32_field(4)
    consumer_appid: int = betterproto.uint32_field(5)
    consumer_shortcutid: int = betterproto.uint32_field(6)
    filename: str = betterproto.string_field(7)
    file_size: int = betterproto.uint64_field(8)
    preview_file_size: int = betterproto.uint64_field(9)
    file_url: str = betterproto.string_field(10)
    preview_url: str = betterproto.string_field(11)
    youtubevideoid: str = betterproto.string_field(12)
    url: str = betterproto.string_field(13)
    hcontent_file: float = betterproto.fixed64_field(14)
    hcontent_preview: float = betterproto.fixed64_field(15)
    title: str = betterproto.string_field(16)
    file_description: str = betterproto.string_field(17)
    short_description: str = betterproto.string_field(18)
    time_created: int = betterproto.uint32_field(19)
    time_updated: int = betterproto.uint32_field(20)
    visibility: int = betterproto.uint32_field(21)
    flags: int = betterproto.uint32_field(22)
    workshop_file: bool = betterproto.bool_field(23)
    workshop_accepted: bool = betterproto.bool_field(24)
    show_subscribe_all: bool = betterproto.bool_field(25)
    num_comments_developer: int = betterproto.int32_field(26)
    num_comments_public: int = betterproto.int32_field(27)
    banned: bool = betterproto.bool_field(28)
    ban_reason: str = betterproto.string_field(29)
    banner: float = betterproto.fixed64_field(30)
    can_be_deleted: bool = betterproto.bool_field(31)
    incompatible: bool = betterproto.bool_field(32)
    app_name: str = betterproto.string_field(33)
    file_type: int = betterproto.uint32_field(34)
    can_subscribe: bool = betterproto.bool_field(35)
    subscriptions: int = betterproto.uint32_field(36)
    favorited: int = betterproto.uint32_field(37)
    followers: int = betterproto.uint32_field(38)
    lifetime_subscriptions: int = betterproto.uint32_field(39)
    lifetime_favorited: int = betterproto.uint32_field(40)
    lifetime_followers: int = betterproto.uint32_field(41)
    views: int = betterproto.uint32_field(42)
    image_width: int = betterproto.uint32_field(43)
    image_height: int = betterproto.uint32_field(44)
    image_url: str = betterproto.string_field(45)
    spoiler_tag: bool = betterproto.bool_field(46)
    shortcutid: int = betterproto.uint32_field(47)
    shortcutname: str = betterproto.string_field(48)
    num_children: int = betterproto.uint32_field(49)
    num_reports: int = betterproto.uint32_field(50)
    previews: List["PublishedFileDetailsPreview"] = betterproto.message_field(51)
    tags: List["PublishedFileDetailsTag"] = betterproto.message_field(52)
    children: List["PublishedFileDetailsChild"] = betterproto.message_field(53)
    kvtags: List["PublishedFileDetailsKVTag"] = betterproto.message_field(54)
    vote_data: "PublishedFileDetailsVoteData" = betterproto.message_field(55)
    time_subscribed: int = betterproto.uint32_field(56)


@dataclass
class PublishedFileDetailsTag(betterproto.Message):
    tag: str = betterproto.string_field(1)
    adminonly: bool = betterproto.bool_field(2)


@dataclass
class PublishedFileDetailsPreview(betterproto.Message):
    previewid: int = betterproto.uint64_field(1)
    sortorder: int = betterproto.uint32_field(2)
    url: str = betterproto.string_field(3)
    size: int = betterproto.uint32_field(4)
    filename: str = betterproto.string_field(5)
    youtubevideoid: str = betterproto.string_field(6)


@dataclass
class PublishedFileDetailsChild(betterproto.Message):
    publishedfileid: int = betterproto.uint64_field(1)
    sortorder: int = betterproto.uint32_field(2)
    file_type: int = betterproto.uint32_field(3)


@dataclass
class PublishedFileDetailsKVTag(betterproto.Message):
    key: str = betterproto.string_field(1)
    value: str = betterproto.string_field(2)


@dataclass
class PublishedFileDetailsVoteData(betterproto.Message):
    score: float = betterproto.float_field(1)
    votes_up: int = betterproto.uint32_field(2)
    votes_down: int = betterproto.uint32_field(3)


@dataclass
class CPublishedFile_GetDetails_Response(betterproto.Message):
    publishedfiledetails: List["PublishedFileDetails"] = betterproto.message_field(1)


@dataclass
class CPublishedFile_GetUserFiles_Request(betterproto.Message):
    appid: int = betterproto.uint32_field(1)
    page: int = betterproto.uint32_field(3)
    numperpage: int = betterproto.uint32_field(4)
    sortmethod: str = betterproto.string_field(6)
    totalonly: bool = betterproto.bool_field(7)
    privacy: int = betterproto.uint32_field(9)
    ids_only: bool = betterproto.bool_field(10)
    requiredtags: List[str] = betterproto.string_field(11)
    excludedtags: List[str] = betterproto.string_field(12)


@dataclass
class CPublishedFile_GetUserFiles_Response(betterproto.Message):
    total: int = betterproto.uint32_field(1)
    startindex: int = betterproto.uint32_field(2)
    publishedfiledetails: List["PublishedFileDetails"] = betterproto.message_field(3)
    apps: List["CPublishedFile_GetUserFiles_ResponseApp"] = betterproto.message_field(4)


@dataclass
class CPublishedFile_GetUserFiles_ResponseApp(betterproto.Message):
    appid: int = betterproto.uint32_field(1)
    name: str = betterproto.string_field(2)
    shortcutid: int = betterproto.uint32_field(3)
    private: bool = betterproto.bool_field(4)


@dataclass
class CPublishedFile_Update_Request(betterproto.Message):
    appid: int = betterproto.uint32_field(1)
    publishedfileid: float = betterproto.fixed64_field(2)
    title: str = betterproto.string_field(3)
    file_description: str = betterproto.string_field(4)
    visibility: int = betterproto.uint32_field(5)
    tags: List[str] = betterproto.string_field(6)
    filename: str = betterproto.string_field(7)
    preview_filename: str = betterproto.string_field(8)


@dataclass
class CPublishedFile_Update_Response(betterproto.Message):
    pass


@dataclass
class CPublishedFile_RefreshVotingQueue_Request(betterproto.Message):
    appid: int = betterproto.uint32_field(1)
    matching_file_type: int = betterproto.uint32_field(2)
    tags: List[str] = betterproto.string_field(3)
    match_all_tags: bool = betterproto.bool_field(4)
    excluded_tags: List[str] = betterproto.string_field(5)
    desired_queue_size: int = betterproto.uint32_field(6)


@dataclass
class CPublishedFile_RefreshVotingQueue_Response(betterproto.Message):
    pass


class PublishedFileStub(betterproto.ServiceStub):
    async def subscribe(
        self,
        *,
        publishedfileid: int = 0,
        list_type: int = 0,
        appid: int = 0,
        notify_client: bool = False,
    ) -> CPublishedFile_Subscribe_Response:
        request = CPublishedFile_Subscribe_Request()
        request.publishedfileid = publishedfileid
        request.list_type = list_type
        request.appid = appid
        request.notify_client = notify_client

        return await self._unary_unary(
            "/.PublishedFile/Subscribe",
            request,
            CPublishedFile_Subscribe_Response,
        )

    async def unsubscribe(
        self,
        *,
        publishedfileid: int = 0,
        list_type: int = 0,
        appid: int = 0,
        notify_client: bool = False,
    ) -> CPublishedFile_Unsubscribe_Response:
        request = CPublishedFile_Unsubscribe_Request()
        request.publishedfileid = publishedfileid
        request.list_type = list_type
        request.appid = appid
        request.notify_client = notify_client

        return await self._unary_unary(
            "/.PublishedFile/Unsubscribe",
            request,
            CPublishedFile_Unsubscribe_Response,
        )

    async def publish(
        self,
        *,
        appid: int = 0,
        consumer_appid: int = 0,
        cloudfilename: str = "",
        preview_cloudfilename: str = "",
        title: str = "",
        file_description: str = "",
        file_type: int = 0,
        consumer_shortcut_name: str = "",
        youtube_username: str = "",
        youtube_videoid: str = "",
        visibility: int = 0,
        redirect_uri: str = "",
        tags: List[str] = [],
        collection_type: str = "",
        game_type: str = "",
        url: str = "",
    ) -> CPublishedFile_Publish_Response:
        request = CPublishedFile_Publish_Request()
        request.appid = appid
        request.consumer_appid = consumer_appid
        request.cloudfilename = cloudfilename
        request.preview_cloudfilename = preview_cloudfilename
        request.title = title
        request.file_description = file_description
        request.file_type = file_type
        request.consumer_shortcut_name = consumer_shortcut_name
        request.youtube_username = youtube_username
        request.youtube_videoid = youtube_videoid
        request.visibility = visibility
        request.redirect_uri = redirect_uri
        request.tags = tags
        request.collection_type = collection_type
        request.game_type = game_type
        request.url = url

        return await self._unary_unary(
            "/.PublishedFile/Publish",
            request,
            CPublishedFile_Publish_Response,
        )

    async def get_details(
        self,
        *,
        publishedfileids: List[float] = [],
        includetags: bool = False,
        includeadditionalpreviews: bool = False,
        includechildren: bool = False,
        includekvtags: bool = False,
        includevotes: bool = False,
        short_description: bool = False,
    ) -> CPublishedFile_GetDetails_Response:
        request = CPublishedFile_GetDetails_Request()
        request.publishedfileids = publishedfileids
        request.includetags = includetags
        request.includeadditionalpreviews = includeadditionalpreviews
        request.includechildren = includechildren
        request.includekvtags = includekvtags
        request.includevotes = includevotes
        request.short_description = short_description

        return await self._unary_unary(
            "/.PublishedFile/GetDetails",
            request,
            CPublishedFile_GetDetails_Response,
        )

    async def get_user_files(
        self,
        *,
        appid: int = 0,
        page: int = 0,
        numperpage: int = 0,
        sortmethod: str = "",
        totalonly: bool = False,
        privacy: int = 0,
        ids_only: bool = False,
        requiredtags: List[str] = [],
        excludedtags: List[str] = [],
    ) -> CPublishedFile_GetUserFiles_Response:
        request = CPublishedFile_GetUserFiles_Request()
        request.appid = appid
        request.page = page
        request.numperpage = numperpage
        request.sortmethod = sortmethod
        request.totalonly = totalonly
        request.privacy = privacy
        request.ids_only = ids_only
        request.requiredtags = requiredtags
        request.excludedtags = excludedtags

        return await self._unary_unary(
            "/.PublishedFile/GetUserFiles",
            request,
            CPublishedFile_GetUserFiles_Response,
        )

    async def update(
        self,
        *,
        appid: int = 0,
        publishedfileid: float = 0,
        title: str = "",
        file_description: str = "",
        visibility: int = 0,
        tags: List[str] = [],
        filename: str = "",
        preview_filename: str = "",
    ) -> CPublishedFile_Update_Response:
        request = CPublishedFile_Update_Request()
        request.appid = appid
        request.publishedfileid = publishedfileid
        request.title = title
        request.file_description = file_description
        request.visibility = visibility
        request.tags = tags
        request.filename = filename
        request.preview_filename = preview_filename

        return await self._unary_unary(
            "/.PublishedFile/Update",
            request,
            CPublishedFile_Update_Response,
        )

    async def refresh_voting_queue(
        self,
        *,
        appid: int = 0,
        matching_file_type: int = 0,
        tags: List[str] = [],
        match_all_tags: bool = False,
        excluded_tags: List[str] = [],
        desired_queue_size: int = 0,
    ) -> CPublishedFile_RefreshVotingQueue_Response:
        request = CPublishedFile_RefreshVotingQueue_Request()
        request.appid = appid
        request.matching_file_type = matching_file_type
        request.tags = tags
        request.match_all_tags = match_all_tags
        request.excluded_tags = excluded_tags
        request.desired_queue_size = desired_queue_size

        return await self._unary_unary(
            "/.PublishedFile/RefreshVotingQueue",
            request,
            CPublishedFile_RefreshVotingQueue_Response,
        )
