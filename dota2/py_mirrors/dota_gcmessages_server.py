# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: dota_gcmessages_server.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import List

import betterproto


class EPoorNetworkConditionsType(betterproto.Enum):
    k_EPoorNetworkConditions_None = 0
    k_EPoorNetworkConditions_Unknown = 1
    k_EPoorNetworkConditions_MassDisconnect = 2
    k_EPoorNetworkConditions_ExcessBadQosIntervals = 3


class CMsgConnectedPlayersSendReason(betterproto.Enum):
    INVALID = 0
    HEARTBEAT = 1
    GAME_STATE = 2
    FIRST_BLOOD = 3
    PLAYER_CONNECTED = 4
    PLAYER_HERO = 5
    PLAYER_DISCONNECTED_CONSEQUENCES = 6
    PLAYER_DISCONNECTED_NOCONSEQUENCES = 7
    GAMESTATE_TIMEOUT = 10
    MASS_DISCONNECT = 11
    KILLS = 13
    BUILDING_STATE = 14


class CMsgGameServerInfoServerType(betterproto.Enum):
    UNSPECIFIED = 0
    GAME = 1
    PROXY = 2
    DOTA_ONLY = 4
    CUSTOM_GAME_ONLY = 5
    EVENT_GAME_ONLY = 6


class CMsgGameServerInfoCustomGames(betterproto.Enum):
    BOTH = 0
    NONE = 1
    ONLY = 2
    EVENT = 3


class CMsgGameMatchSignOutCTeamCPlayerHeroDamageType(betterproto.Enum):
    HERO_DAMAGE_PHYSICAL = 0
    HERO_DAMAGE_MAGICAL = 1
    HERO_DAMAGE_PURE = 2


class CMsgDOTALiveScoreboardUpdateTeamPlayerDOTAUltimateState(betterproto.Enum):
    k_EDOTAUltimateStateNotLearned = 0
    k_EDOTAUltimateStateCooldown = 1
    k_EDOTAUltimateStateNeedsMana = 2
    k_EDOTAUltimateStateReady = 3


@dataclass
class CMsgPoorNetworkConditions(betterproto.Message):
    detection_type: "EPoorNetworkConditionsType" = betterproto.enum_field(1)
    players: List["CMsgPoorNetworkConditionsPlayer"] = betterproto.message_field(2)


@dataclass
class CMsgPoorNetworkConditionsPlayer(betterproto.Message):
    account_id: int = betterproto.uint32_field(1)
    disconnect_reason: "ENetworkDisconnectionReason" = betterproto.enum_field(2)
    num_bad_intervals: int = betterproto.uint32_field(3)
    peak_loss_pct: int = betterproto.uint32_field(4)


@dataclass
class CMsgGameserverCrash(betterproto.Message):
    match_id: int = betterproto.uint64_field(1)
    lobby_id: float = betterproto.fixed64_field(2)
    game_state: "DOTA_GameState" = betterproto.enum_field(3)
    sentinel_save_time: float = betterproto.fixed32_field(4)
    custom_game_id: float = betterproto.fixed64_field(11)
    tournament_id: int = betterproto.uint32_field(12)
    server_steam_id: float = betterproto.fixed64_field(5)
    server_public_ip_addr: float = betterproto.fixed32_field(6)
    server_port: int = betterproto.uint32_field(7)
    server_cluster: int = betterproto.uint32_field(8)
    pid: int = betterproto.uint32_field(9)
    engine: int = betterproto.uint32_field(10)


@dataclass
class CMsgConnectedPlayers(betterproto.Message):
    connected_players: List["CMsgConnectedPlayersPlayer"] = betterproto.message_field(1)
    disconnected_players: List[
        "CMsgConnectedPlayersPlayer"
    ] = betterproto.message_field(7)
    game_state: "DOTA_GameState" = betterproto.enum_field(2)
    first_blood_happened: bool = betterproto.bool_field(6)
    poor_network_conditions: "CMsgPoorNetworkConditions" = betterproto.message_field(10)
    send_reason: "CMsgConnectedPlayersSendReason" = betterproto.enum_field(8)
    radiant_kills: int = betterproto.uint32_field(11)
    dire_kills: int = betterproto.uint32_field(12)
    radiant_lead: int = betterproto.int32_field(14)
    building_state: int = betterproto.uint32_field(15)
    player_draft: List["CMsgConnectedPlayersPlayerDraft"] = betterproto.message_field(
        16
    )


@dataclass
class CMsgConnectedPlayersPlayer(betterproto.Message):
    steam_id: float = betterproto.fixed64_field(1)
    hero_id: int = betterproto.int32_field(2)
    leaver_state: "CMsgLeaverState" = betterproto.message_field(3)
    disconnect_reason: "ENetworkDisconnectionReason" = betterproto.enum_field(4)


@dataclass
class CMsgConnectedPlayersPlayerDraft(betterproto.Message):
    steam_id: float = betterproto.fixed64_field(1)
    team: "DOTA_GC_TEAM" = betterproto.enum_field(2)
    team_slot: int = betterproto.int32_field(3)


@dataclass
class CMsgGameServerInfo(betterproto.Message):
    server_public_ip_addr: float = betterproto.fixed32_field(1)
    server_private_ip_addr: float = betterproto.fixed32_field(2)
    server_port: int = betterproto.uint32_field(3)
    server_tv_port: int = betterproto.uint32_field(4)
    assigned_server_tv_port: int = betterproto.uint32_field(22)
    legacy_server_steamdatagram_address: bytes = betterproto.bytes_field(27)
    server_key: str = betterproto.string_field(5)
    server_hibernation: bool = betterproto.bool_field(6)
    server_type: "CMsgGameServerInfoServerType" = betterproto.enum_field(7)
    server_region: int = betterproto.uint32_field(8)
    server_loadavg: float = betterproto.float_field(9)
    server_tv_broadcast_time: float = betterproto.float_field(10)
    server_game_time: float = betterproto.float_field(11)
    server_relay_connected_steam_id: float = betterproto.fixed64_field(12)
    relay_slots_max: int = betterproto.uint32_field(13)
    relays_connected: int = betterproto.int32_field(14)
    relay_clients_connected: int = betterproto.int32_field(15)
    relayed_game_server_steam_id: float = betterproto.fixed64_field(16)
    parent_relay_count: int = betterproto.uint32_field(17)
    tv_secret_code: float = betterproto.fixed64_field(18)
    server_version: int = betterproto.uint32_field(19)
    server_cluster: int = betterproto.uint32_field(20)
    allow_custom_games: "CMsgGameServerInfoCustomGames" = betterproto.enum_field(23)
    build_version: int = betterproto.uint32_field(24)
    srcds_instance: int = betterproto.uint32_field(26)
    dev_force_server_type: bool = betterproto.bool_field(28)
    is_recording_match_training_data: bool = betterproto.bool_field(29)


@dataclass
class CMsgLeaverDetected(betterproto.Message):
    steam_id: float = betterproto.fixed64_field(1)
    leaver_status: "DOTALeaverStatusT" = betterproto.enum_field(2)
    leaver_state: "CMsgLeaverState" = betterproto.message_field(4)
    server_cluster: int = betterproto.uint32_field(5)
    disconnect_reason: "ENetworkDisconnectionReason" = betterproto.enum_field(6)
    poor_network_conditions: "CMsgPoorNetworkConditions" = betterproto.message_field(7)


@dataclass
class CMsgLeaverDetectedResponse(betterproto.Message):
    result: int = betterproto.uint32_field(1)


@dataclass
class CMsgDOTAFantasyFinalPlayerStats(betterproto.Message):
    stats: List["CMsgDOTAFantasyPlayerStats"] = betterproto.message_field(2)


@dataclass
class CMsgDOTAFantasyLivePlayerStats(betterproto.Message):
    stats: List["CMsgDOTAFantasyPlayerStats"] = betterproto.message_field(2)


@dataclass
class CMsgServerToGCRealtimeStats(betterproto.Message):
    delayed: "CMsgDOTARealtimeGameStatsTerse" = betterproto.message_field(1)


@dataclass
class CMsgGCToServerRealtimeStatsStartStop(betterproto.Message):
    delayed: bool = betterproto.bool_field(1)


@dataclass
class CMsgGCToServerUpdateSteamBroadcasting(betterproto.Message):
    active: bool = betterproto.bool_field(1)


@dataclass
class CMsgSignOutGameplayStats(betterproto.Message):
    teams: List["CMsgSignOutGameplayStatsCTeam"] = betterproto.message_field(1)


@dataclass
class CMsgSignOutGameplayStatsCPlayer(betterproto.Message):
    steam_id: float = betterproto.fixed64_field(1)
    player_slot: int = betterproto.uint32_field(2)
    hero_id: int = betterproto.int32_field(3)
    timed_player_stats: List["CMatchPlayerTimedStats"] = betterproto.message_field(4)


@dataclass
class CMsgSignOutGameplayStatsCTeam(betterproto.Message):
    is_winning_team: bool = betterproto.bool_field(1)
    is_radiant_team: bool = betterproto.bool_field(2)
    timed_team_stats: List["CMatchTeamTimedStats"] = betterproto.message_field(3)
    players: List["CMsgSignOutGameplayStatsCPlayer"] = betterproto.message_field(4)


@dataclass
class CMsgGameMatchSignOut(betterproto.Message):
    match_id: int = betterproto.uint64_field(1)
    duration: int = betterproto.uint32_field(2)
    good_guys_win: bool = betterproto.bool_field(3)
    date: float = betterproto.fixed32_field(4)
    teams: List["CMsgGameMatchSignOutCTeam"] = betterproto.message_field(6)
    tower_status: List[int] = betterproto.uint32_field(8)
    barracks_status: List[int] = betterproto.uint32_field(9)
    cluster: int = betterproto.uint32_field(10)
    server_addr: str = betterproto.string_field(11)
    first_blood_time: int = betterproto.uint32_field(12)
    event_score: int = betterproto.uint32_field(14)
    fantasy_stats: List["CMsgDOTAFantasyPlayerStats"] = betterproto.message_field(41)
    player_strange_count_adjustments: List[
        "CMsgEconPlayerStrangeCountAdjustment"
    ] = betterproto.message_field(17)
    automatic_surrender: bool = betterproto.bool_field(18)
    server_version: int = betterproto.uint32_field(19)
    poor_network_conditions: "CMsgPoorNetworkConditions" = betterproto.message_field(35)
    additional_msgs: List[
        "CMsgGameMatchSignOutCAdditionalSignoutMsg"
    ] = betterproto.message_field(20)
    social_feed_events: List[
        "CMsgGameMatchSignOutCSocialFeedMatchEvent"
    ] = betterproto.message_field(36)
    average_networth_delta: int = betterproto.sint32_field(22)
    custom_game_data: "CMsgGameMatchSignOutCCustomGameData" = betterproto.message_field(
        37
    )
    match_flags: int = betterproto.uint32_field(38)
    team_scores: List[int] = betterproto.uint32_field(39)
    pre_game_duration: int = betterproto.uint32_field(40)
    event_game_leaderboard_entries: List[
        "CMsgGameMatchSignOutEventGameLeaderboardEntry"
    ] = betterproto.message_field(42)
    ward_placements: List[
        "CMsgGameMatchSignOutWardPlacement"
    ] = betterproto.message_field(43)
    gameplay_stats: "CMsgSignOutGameplayStats" = betterproto.message_field(44)
    extra_messages: List["CExtraMsgBlock"] = betterproto.message_field(54)
    training_data_recorded: bool = betterproto.bool_field(55)
    winning_team: "DOTA_GC_TEAM" = betterproto.enum_field(56)
    normalized_win_probability_diff: float = betterproto.float_field(57)
    match_tracked_stats: List["CMsgTrackedStat"] = betterproto.message_field(58)


@dataclass
class CMsgGameMatchSignOutCTeam(betterproto.Message):
    players: List["CMsgGameMatchSignOutCTeamCPlayer"] = betterproto.message_field(1)
    team_tracked_stats: List["CMsgTrackedStat"] = betterproto.message_field(2)


@dataclass
class CMsgGameMatchSignOutCTeamCPlayer(betterproto.Message):
    steam_id: float = betterproto.fixed64_field(1)
    hero_id: int = betterproto.int32_field(3)
    items: List[int] = betterproto.int32_field(4)
    item_purchase_times: List[int] = betterproto.uint32_field(63)
    gold: int = betterproto.uint32_field(5)
    kills: int = betterproto.uint32_field(6)
    deaths: int = betterproto.uint32_field(7)
    assists: int = betterproto.uint32_field(8)
    leaver_status: int = betterproto.uint32_field(9)
    last_hits: int = betterproto.uint32_field(10)
    denies: int = betterproto.uint32_field(11)
    gold_per_min: int = betterproto.uint32_field(12)
    xp_per_minute: int = betterproto.uint32_field(13)
    gold_spent: int = betterproto.uint32_field(14)
    level: int = betterproto.uint32_field(15)
    scaled_hero_damage: int = betterproto.uint32_field(16)
    scaled_tower_damage: int = betterproto.uint32_field(17)
    scaled_hero_healing: int = betterproto.uint32_field(18)
    time_last_seen: int = betterproto.uint32_field(19)
    support_ability_value: int = betterproto.uint32_field(20)
    party_id: int = betterproto.uint64_field(21)
    claimed_farm_gold: int = betterproto.uint32_field(27)
    support_gold: int = betterproto.uint32_field(28)
    claimed_denies: int = betterproto.uint32_field(29)
    claimed_misses: int = betterproto.uint32_field(30)
    misses: int = betterproto.uint32_field(31)
    net_worth: int = betterproto.uint32_field(34)
    hero_damage: int = betterproto.uint32_field(37)
    tower_damage: int = betterproto.uint32_field(38)
    hero_healing: int = betterproto.uint32_field(39)
    ability_upgrades: List["CMatchPlayerAbilityUpgrade"] = betterproto.message_field(32)
    additional_units_inventory: List[
        "CMatchAdditionalUnitInventory"
    ] = betterproto.message_field(33)
    permanent_buffs: List["CMatchPlayerPermanentBuff"] = betterproto.message_field(40)
    custom_game_data: "CMsgGameMatchSignOutCTeamCPlayerCCustomGameData" = (
        betterproto.message_field(35)
    )
    match_player_flags: int = betterproto.uint32_field(36)
    talent_ability_ids: List[int] = betterproto.int32_field(41)
    hero_pick_order: int = betterproto.uint32_field(42)
    hero_was_randomed: bool = betterproto.bool_field(43)
    hero_was_dota_plus_suggestion: bool = betterproto.bool_field(50)
    lane: int = betterproto.uint32_field(45)
    is_using_plus_guide: bool = betterproto.bool_field(47)
    hero_damage_received: List[
        "CMsgGameMatchSignOutCTeamCPlayerHeroDamageReceived"
    ] = betterproto.message_field(48)
    hero_damage_dealt: List[
        "CMsgGameMatchSignOutCTeamCPlayerHeroDamageReceived"
    ] = betterproto.message_field(64)
    seconds_dead: int = betterproto.uint32_field(51)
    gold_lost_to_death: int = betterproto.uint32_field(52)
    command_count: int = betterproto.uint32_field(53)
    mouse_click_cast_command_count: int = betterproto.uint32_field(54)
    teleports_used: int = betterproto.uint32_field(55)
    cavern_crawl_preferred_map_variant: int = betterproto.uint32_field(56)
    bounty_runes: int = betterproto.uint32_field(57)
    outposts_captured: int = betterproto.uint32_field(58)
    dewards: int = betterproto.uint32_field(59)
    wards_placed: int = betterproto.uint32_field(60)
    camps_stacked: int = betterproto.uint32_field(61)
    player_slot: int = betterproto.uint32_field(62)
    predicted_position: int = betterproto.uint32_field(66)
    lane_outcomes: int = betterproto.uint32_field(67)
    friendly_t1_destroyed_time: int = betterproto.uint32_field(68)
    enemy_t1_destroyed_time: int = betterproto.uint32_field(69)
    friendly_roshan_kills: int = betterproto.uint32_field(70)
    enemy_roshan_kills: int = betterproto.uint32_field(71)
    power_runes: int = betterproto.uint32_field(72)
    water_runes: int = betterproto.uint32_field(73)
    stun_duration: float = betterproto.float_field(74)
    team_number: "DOTA_GC_TEAM" = betterproto.enum_field(75)
    team_slot: int = betterproto.uint32_field(76)
    time_purchased_shard: int = betterproto.uint32_field(77)
    time_purchased_aghs: int = betterproto.uint32_field(78)
    ability_draft_abilities: List[int] = betterproto.int32_field(79)
    player_tracked_stats: List["CMsgTrackedStat"] = betterproto.message_field(80)
    predicted_rank: int = betterproto.uint32_field(81)
    selected_facet: int = betterproto.uint32_field(82)


@dataclass
class CMsgGameMatchSignOutCTeamCPlayerCCustomGameData(betterproto.Message):
    dota_team: int = betterproto.uint32_field(1)
    winner: bool = betterproto.bool_field(2)


@dataclass
class CMsgGameMatchSignOutCTeamCPlayerHeroDamageReceived(betterproto.Message):
    pre_reduction: int = betterproto.uint32_field(1)
    post_reduction: int = betterproto.uint32_field(2)
    damage_type: "CMsgGameMatchSignOutCTeamCPlayerHeroDamageType" = (
        betterproto.enum_field(3)
    )


@dataclass
class CMsgGameMatchSignOutCAdditionalSignoutMsg(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    contents: bytes = betterproto.bytes_field(2)


@dataclass
class CMsgGameMatchSignOutCSocialFeedMatchEvent(betterproto.Message):
    account_id: int = betterproto.uint32_field(1)
    timestamp: int = betterproto.uint32_field(2)
    event_type: int = betterproto.uint32_field(3)
    game_time: int = betterproto.int32_field(4)
    replay_time: int = betterproto.uint32_field(5)


@dataclass
class CMsgGameMatchSignOutCCustomGameData(betterproto.Message):
    publish_timestamp: int = betterproto.uint32_field(1)


@dataclass
class CMsgGameMatchSignOutEventGameLeaderboardEntry(betterproto.Message):
    name_suffix: str = betterproto.string_field(1)
    score: int = betterproto.int32_field(2)
    extra_data_1: int = betterproto.uint32_field(3)
    extra_data_2: int = betterproto.uint32_field(4)
    extra_data_3: int = betterproto.uint32_field(5)
    extra_data_4: int = betterproto.uint32_field(6)
    extra_data_5: int = betterproto.uint32_field(7)


@dataclass
class CMsgGameMatchSignOutWardPlacement(betterproto.Message):
    player_id: int = betterproto.int32_field(1)
    team_id: int = betterproto.uint32_field(2)
    placed_time: int = betterproto.uint32_field(3)
    building_state: int = betterproto.uint32_field(4)
    creep_state: int = betterproto.uint32_field(5)
    roshan_alive: bool = betterproto.bool_field(6)
    position_x: int = betterproto.uint32_field(7)
    position_y: int = betterproto.uint32_field(8)


@dataclass
class CMsgSignOutDraftInfo(betterproto.Message):
    radiant_captain_account_id: int = betterproto.uint32_field(1)
    dire_captain_account_id: int = betterproto.uint32_field(2)
    picks_bans: List["CMatchHeroSelectEvent"] = betterproto.message_field(3)


@dataclass
class CMsgSignOutBotInfo(betterproto.Message):
    allow_cheats: bool = betterproto.bool_field(1)
    bot_difficulty_radiant: "DOTABotDifficulty" = betterproto.enum_field(2)
    created_lobby: bool = betterproto.bool_field(3)
    bot_difficulty_dire: "DOTABotDifficulty" = betterproto.enum_field(5)


@dataclass
class CMsgSignOutTextMuteInfo(betterproto.Message):
    text_mute_messages: List[
        "CMsgSignOutTextMuteInfoTextMuteMessage"
    ] = betterproto.message_field(1)


@dataclass
class CMsgSignOutTextMuteInfoTextMuteMessage(betterproto.Message):
    region: int = betterproto.uint32_field(1)
    caused_text_mute: bool = betterproto.bool_field(2)
    chat_message: str = betterproto.string_field(3)


@dataclass
class CMsgSignOutPlayerStats(betterproto.Message):
    account_id: int = betterproto.int32_field(1)
    match_id: int = betterproto.uint64_field(2)
    rank: int = betterproto.uint32_field(3)
    hero_id: int = betterproto.int32_field(4)
    rampages: int = betterproto.uint32_field(5)
    triple_kills: int = betterproto.uint32_field(6)
    first_blood_claimed: int = betterproto.uint32_field(7)
    first_blood_given: int = betterproto.uint32_field(8)
    couriers_killed: int = betterproto.uint32_field(9)
    aegises_snatched: int = betterproto.uint32_field(10)
    cheeses_eaten: int = betterproto.uint32_field(11)
    creeps_stacked: int = betterproto.uint32_field(12)
    fight_score: float = betterproto.float_field(13)
    farm_score: float = betterproto.float_field(14)
    support_score: float = betterproto.float_field(15)
    push_score: float = betterproto.float_field(16)
    kills: int = betterproto.uint32_field(17)
    deaths: int = betterproto.uint32_field(18)
    assists: int = betterproto.uint32_field(19)
    last_hits: int = betterproto.uint32_field(20)
    denies: int = betterproto.uint32_field(21)
    gpm: float = betterproto.float_field(22)
    xppm: float = betterproto.float_field(23)
    net_worth: float = betterproto.float_field(24)
    damage: float = betterproto.float_field(25)
    heals: float = betterproto.float_field(26)
    rapiers_purchased: int = betterproto.uint32_field(27)
    observer_wards_placed: int = betterproto.uint32_field(28)
    wards_destroyed: int = betterproto.uint32_field(29)
    lobby_type: int = betterproto.uint32_field(30)


@dataclass
class CMsgSignOutCommunicationSummary(betterproto.Message):
    players: List[
        "CMsgSignOutCommunicationSummaryPlayerCommunication"
    ] = betterproto.message_field(1)


@dataclass
class CMsgSignOutCommunicationSummaryPlayerCommunication(betterproto.Message):
    account_id: int = betterproto.uint32_field(1)
    pings: int = betterproto.uint32_field(2)
    max_pings_per_interval: int = betterproto.uint32_field(3)
    teammate_pings: int = betterproto.uint32_field(4)
    max_teammate_pings_per_interval: int = betterproto.uint32_field(5)
    team_chat_messages: int = betterproto.uint32_field(6)
    all_chat_messages: int = betterproto.uint32_field(7)
    chat_wheel_messages: int = betterproto.uint32_field(8)
    pauses: int = betterproto.uint32_field(9)
    unpauses: int = betterproto.uint32_field(10)
    lines_drawn: int = betterproto.uint32_field(11)
    voice_chat_seconds: int = betterproto.uint32_field(12)
    chat_mutes: int = betterproto.uint32_field(13)
    voice_mutes: int = betterproto.uint32_field(14)
    ping_details: List[
        "CMsgSignOutCommunicationSummaryPlayerCommunicationPingDetail"
    ] = betterproto.message_field(15)
    comms_blocks_solo: int = betterproto.uint32_field(16)
    comms_blocks_mass: int = betterproto.uint32_field(17)
    chat_log: List[str] = betterproto.string_field(18)


@dataclass
class CMsgSignOutCommunicationSummaryPlayerCommunicationPingDetail(betterproto.Message):
    type: int = betterproto.uint32_field(1)
    count: int = betterproto.uint32_field(2)


@dataclass
class CMsgGameMatchSignoutResponse(betterproto.Message):
    match_id: int = betterproto.uint64_field(1)
    replay_salt: float = betterproto.fixed32_field(2)
    leagueid: int = betterproto.uint32_field(5)
    metadata_private_key: float = betterproto.fixed32_field(7)
    match_details: "CMsgDOTAMatch" = betterproto.message_field(8)
    players_metadata: List[
        "CMsgGameMatchSignoutResponsePlayerMetadata"
    ] = betterproto.message_field(9)
    mvp_data: "CMvpData" = betterproto.message_field(10)
    ow_private_key: float = betterproto.fixed64_field(11)
    ow_salt: float = betterproto.fixed32_field(12)
    ow_replay_id: int = betterproto.uint64_field(13)
    overworld_rewards: "CMsgOverworldMatchRewards" = betterproto.message_field(14)


@dataclass
class CMsgGameMatchSignoutResponsePlayerMetadata(betterproto.Message):
    hero_id: int = betterproto.int32_field(1)
    avg_kills_x16: int = betterproto.uint32_field(2)
    avg_deaths_x16: int = betterproto.uint32_field(3)
    avg_assists_x16: int = betterproto.uint32_field(4)
    avg_gpm_x16: int = betterproto.uint32_field(5)
    avg_xpm_x16: int = betterproto.uint32_field(6)
    best_kills_x16: int = betterproto.uint32_field(7)
    best_assists_x16: int = betterproto.uint32_field(8)
    best_gpm_x16: int = betterproto.uint32_field(9)
    best_xpm_x16: int = betterproto.uint32_field(10)
    win_streak: int = betterproto.uint32_field(11)
    best_win_streak: int = betterproto.uint32_field(12)
    games_played: int = betterproto.uint32_field(13)


@dataclass
class CMsgGameMatchSignOutPermissionRequest(betterproto.Message):
    server_version: int = betterproto.uint32_field(1)
    local_attempt: int = betterproto.uint32_field(2)
    total_attempt: int = betterproto.uint32_field(3)
    seconds_waited: int = betterproto.uint32_field(4)


@dataclass
class CMsgGameMatchSignOutPermissionResponse(betterproto.Message):
    permission_granted: bool = betterproto.bool_field(1)
    abandon_signout: bool = betterproto.bool_field(2)
    retry_delay_seconds: int = betterproto.uint32_field(3)


@dataclass
class CMsgGameMatchSignOutEventGameData(betterproto.Message):
    event_id: "EEvent" = betterproto.enum_field(1)
    game_name: str = betterproto.string_field(2)
    map_name: str = betterproto.string_field(3)
    event_game_data: bytes = betterproto.bytes_field(4)
    start_time: int = betterproto.uint32_field(5)


@dataclass
class CMsgGameMatchSignOutPerfData(betterproto.Message):
    average_frame_time: List[float] = betterproto.float_field(1)
    max_frame_time: List[float] = betterproto.float_field(2)
    server_average_frame_time: float = betterproto.float_field(3)
    server_max_frame_time: float = betterproto.float_field(4)
    average_compute_time: List[float] = betterproto.float_field(5)
    max_compute_time: List[float] = betterproto.float_field(6)
    average_client_tick_time: List[float] = betterproto.float_field(7)
    max_client_tick_time: List[float] = betterproto.float_field(8)
    average_client_simulate_time: List[float] = betterproto.float_field(9)
    max_client_simulate_time: List[float] = betterproto.float_field(10)
    average_output_time: List[float] = betterproto.float_field(11)
    max_output_time: List[float] = betterproto.float_field(12)
    average_wait_for_rendering_to_complete_time: List[float] = betterproto.float_field(
        13
    )
    max_wait_for_rendering_to_complete_time: List[float] = betterproto.float_field(14)
    average_swap_time: List[float] = betterproto.float_field(15)
    max_swap_time: List[float] = betterproto.float_field(16)
    average_frame_update_time: List[float] = betterproto.float_field(17)
    max_frame_update_time: List[float] = betterproto.float_field(18)
    average_idle_time: List[float] = betterproto.float_field(19)
    max_idle_time: List[float] = betterproto.float_field(20)
    average_input_processing_time: List[float] = betterproto.float_field(21)
    max_input_processing_time: List[float] = betterproto.float_field(22)


@dataclass
class CMsgGameMatchSignOutBanData(betterproto.Message):
    hero_bans: List[int] = betterproto.int32_field(1)
    hero_ban_votes: List[int] = betterproto.int32_field(2)


@dataclass
class CMsgDOTALiveScoreboardUpdate(betterproto.Message):
    tournament_id: int = betterproto.uint32_field(1)
    tournament_game_id: int = betterproto.uint32_field(2)
    duration: float = betterproto.float_field(3)
    hltv_delay: int = betterproto.int32_field(4)
    team_good: "CMsgDOTALiveScoreboardUpdateTeam" = betterproto.message_field(5)
    team_bad: "CMsgDOTALiveScoreboardUpdateTeam" = betterproto.message_field(6)
    roshan_respawn_timer: int = betterproto.uint32_field(7)
    league_id: int = betterproto.uint32_field(8)
    match_id: int = betterproto.uint64_field(9)


@dataclass
class CMsgDOTALiveScoreboardUpdateTeam(betterproto.Message):
    players: List["CMsgDOTALiveScoreboardUpdateTeamPlayer"] = betterproto.message_field(
        1
    )
    score: int = betterproto.uint32_field(2)
    tower_state: int = betterproto.uint32_field(3)
    barracks_state: int = betterproto.uint32_field(4)
    hero_picks: List[int] = betterproto.int32_field(5)
    hero_bans: List[int] = betterproto.int32_field(6)


@dataclass
class CMsgDOTALiveScoreboardUpdateTeamPlayer(betterproto.Message):
    player_slot: int = betterproto.uint32_field(1)
    player_name: str = betterproto.string_field(2)
    hero_name: str = betterproto.string_field(3)
    hero_id: int = betterproto.int32_field(4)
    kills: int = betterproto.uint32_field(5)
    deaths: int = betterproto.uint32_field(6)
    assists: int = betterproto.uint32_field(7)
    last_hits: int = betterproto.uint32_field(8)
    denies: int = betterproto.uint32_field(9)
    gold: int = betterproto.uint32_field(10)
    level: int = betterproto.uint32_field(11)
    gold_per_min: float = betterproto.float_field(12)
    xp_per_min: float = betterproto.float_field(13)
    ultimate_state: "CMsgDOTALiveScoreboardUpdateTeamPlayerDOTAUltimateState" = (
        betterproto.enum_field(14)
    )
    ultimate_cooldown: float = betterproto.float_field(15)
    item0: int = betterproto.int32_field(16)
    item1: int = betterproto.int32_field(17)
    item2: int = betterproto.int32_field(18)
    item3: int = betterproto.int32_field(19)
    item4: int = betterproto.int32_field(20)
    item5: int = betterproto.int32_field(21)
    respawn_timer: int = betterproto.uint32_field(22)
    account_id: int = betterproto.uint32_field(23)
    position_x: float = betterproto.float_field(24)
    position_y: float = betterproto.float_field(25)
    net_worth: int = betterproto.uint32_field(26)
    abilities: List[
        "CMsgDOTALiveScoreboardUpdateTeamPlayerHeroAbility"
    ] = betterproto.message_field(27)


@dataclass
class CMsgDOTALiveScoreboardUpdateTeamPlayerHeroAbility(betterproto.Message):
    ability_id: int = betterproto.int32_field(1)
    ability_level: int = betterproto.uint32_field(2)


@dataclass
class CMsgServerToGCRequestBatchPlayerResources(betterproto.Message):
    account_ids: List[int] = betterproto.uint32_field(1)
    rank_types: List[int] = betterproto.uint32_field(4)
    lobby_type: int = betterproto.int32_field(5)


@dataclass
class CMsgServerToGCRequestBatchPlayerResourcesResponse(betterproto.Message):
    results: List[
        "CMsgServerToGCRequestBatchPlayerResourcesResponseResult"
    ] = betterproto.message_field(6)


@dataclass
class CMsgServerToGCRequestBatchPlayerResourcesResponseResult(betterproto.Message):
    account_id: int = betterproto.uint32_field(1)
    rank: int = betterproto.uint32_field(4)
    rank_calibrated: bool = betterproto.bool_field(5)
    low_priority: bool = betterproto.bool_field(6)
    is_new_player: bool = betterproto.bool_field(7)
    is_guide_player: bool = betterproto.bool_field(8)
    comm_level: int = betterproto.int32_field(9)
    behavior_level: int = betterproto.int32_field(10)
    wins: int = betterproto.int32_field(11)
    losses: int = betterproto.int32_field(12)
    smurf_category: int = betterproto.int32_field(13)


@dataclass
class CMsgDOTAPlayerFailedToConnect(betterproto.Message):
    failed_loaders: List[float] = betterproto.fixed64_field(1)
    abandoned_loaders: List[float] = betterproto.fixed64_field(2)


@dataclass
class CMsgGCToRelayConnect(betterproto.Message):
    source_tv_public_addr: int = betterproto.uint32_field(1)
    source_tv_private_addr: int = betterproto.uint32_field(2)
    source_tv_port: int = betterproto.uint32_field(3)
    game_server_steam_id: int = betterproto.uint64_field(4)
    parent_count: int = betterproto.uint32_field(5)
    tv_unique_secret_code: float = betterproto.fixed64_field(6)
    source_tv_steamid: float = betterproto.fixed64_field(7)


@dataclass
class CMsgGCGCToLANServerRelayConnect(betterproto.Message):
    relay_steamid: float = betterproto.fixed64_field(1)


@dataclass
class CMsgGCBanStatusRequest(betterproto.Message):
    account_id: int = betterproto.uint32_field(1)


@dataclass
class CMsgGCBanStatusResponse(betterproto.Message):
    result: int = betterproto.uint32_field(1)
    low_priority: bool = betterproto.bool_field(2)
    text_chat_banned: bool = betterproto.bool_field(3)
    voice_chat_banned: bool = betterproto.bool_field(4)


@dataclass
class CMsgTournamentItemEvent(betterproto.Message):
    killer_account_id: float = betterproto.fixed32_field(1)
    victim_account_id: float = betterproto.fixed32_field(2)
    event_type: "DOTA_TournamentEvents" = betterproto.enum_field(3)
    tv_delay: int = betterproto.int32_field(4)
    dota_time: int = betterproto.int32_field(5)
    replay_time: float = betterproto.float_field(6)
    loot_list: str = betterproto.string_field(7)
    event_team: int = betterproto.uint32_field(8)
    multi_kill_count: int = betterproto.uint32_field(9)
    winner_score: int = betterproto.uint32_field(10)
    loser_score: int = betterproto.uint32_field(11)
    hero_statues: List["CProtoItemHeroStatue"] = betterproto.message_field(12)


@dataclass
class CMsgTournamentItemEventResponse(betterproto.Message):
    event_type: "DOTA_TournamentEvents" = betterproto.enum_field(1)
    viewers_granted: int = betterproto.uint32_field(6)


@dataclass
class CMsgTeamFanfare(betterproto.Message):
    match_id: int = betterproto.uint64_field(1)


@dataclass
class CMsgResponseTeamFanfare(betterproto.Message):
    fanfare_goodguys: int = betterproto.uint32_field(1)
    fanfare_badguys: int = betterproto.uint32_field(2)


@dataclass
class CMsgDOTAAwardEventPoints(betterproto.Message):
    award_points: List[
        "CMsgDOTAAwardEventPointsAwardPoints"
    ] = betterproto.message_field(1)
    match_id: int = betterproto.uint64_field(2)
    event_id: "EEvent" = betterproto.enum_field(4)
    timestamp: int = betterproto.uint32_field(5)
    audit_action: int = betterproto.uint32_field(6)


@dataclass
class CMsgDOTAAwardEventPointsAwardPoints(betterproto.Message):
    account_id: int = betterproto.uint32_field(1)
    points: int = betterproto.int32_field(2)
    premium_points: int = betterproto.int32_field(3)
    trade_ban_time: int = betterproto.uint32_field(5)
    eligible_for_periodic_adjustment: bool = betterproto.bool_field(6)
    point_cap_periodic_resource_id: int = betterproto.uint32_field(7)


@dataclass
class CMsgGCToServerPingRequest(betterproto.Message):
    request_id: float = betterproto.fixed64_field(1)
    request_time: int = betterproto.uint64_field(2)


@dataclass
class CMsgGCToServerPingResponse(betterproto.Message):
    request_id: float = betterproto.fixed64_field(1)
    request_time: int = betterproto.uint64_field(2)
    cluster: int = betterproto.uint32_field(3)


@dataclass
class CMsgServerToGCMatchConnectionStats(betterproto.Message):
    match_id: int = betterproto.uint64_field(1)
    region_id: int = betterproto.uint32_field(2)
    league_id: int = betterproto.uint32_field(3)
    players: List[
        "CMsgServerToGCMatchConnectionStatsPlayer"
    ] = betterproto.message_field(4)
    cluster_id: int = betterproto.uint32_field(5)


@dataclass
class CMsgServerToGCMatchConnectionStatsPlayer(betterproto.Message):
    account_id: int = betterproto.uint32_field(1)
    ip: float = betterproto.fixed32_field(2)
    avg_ping_ms: int = betterproto.uint32_field(3)
    packet_loss: float = betterproto.float_field(5)
    ping_deviation: float = betterproto.float_field(6)
    full_resends: int = betterproto.uint32_field(7)


@dataclass
class CMsgServerGCUpdateSpectatorCount(betterproto.Message):
    spectator_count: int = betterproto.uint32_field(1)


@dataclass
class CSerializedCombatLog(betterproto.Message):
    version: int = betterproto.uint32_field(1)
    dictionary: "CSerializedCombatLogDictionary" = betterproto.message_field(2)
    entries: List["CMsgDOTACombatLogEntry"] = betterproto.message_field(3)


@dataclass
class CSerializedCombatLogDictionary(betterproto.Message):
    strings: List[
        "CSerializedCombatLogDictionaryDictString"
    ] = betterproto.message_field(1)


@dataclass
class CSerializedCombatLogDictionaryDictString(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    value: str = betterproto.string_field(2)


@dataclass
class CMsgServerToGCVictoryPredictions(betterproto.Message):
    records: List["CMsgServerToGCVictoryPredictionsRecord"] = betterproto.message_field(
        1
    )


@dataclass
class CMsgServerToGCVictoryPredictionsPredictionItem(betterproto.Message):
    item_id: int = betterproto.uint64_field(1)
    item_def: int = betterproto.uint32_field(2)


@dataclass
class CMsgServerToGCVictoryPredictionsRecord(betterproto.Message):
    account_id: int = betterproto.uint32_field(1)
    item_ids: List[int] = betterproto.uint64_field(5)
    prediction_items: List[
        "CMsgServerToGCVictoryPredictionsPredictionItem"
    ] = betterproto.message_field(6)


@dataclass
class CMsgServerToGCRequestStatus(betterproto.Message):
    pass


@dataclass
class CMsgServerToGCRequestStatus_Response(betterproto.Message):
    response: int = betterproto.uint32_field(1)


@dataclass
class CMsgGCToServerEvaluateToxicChat(betterproto.Message):
    target_account_id: int = betterproto.uint32_field(1)
    reporter_account_id: int = betterproto.uint32_field(2)


@dataclass
class CMsgServerToGCEvaluateToxicChat(betterproto.Message):
    target_account_id: int = betterproto.uint32_field(1)
    reporter_account_id: int = betterproto.uint32_field(2)
    match_id: float = betterproto.fixed64_field(3)
    timestamp: List[int] = betterproto.uint32_field(4)
    line: List[str] = betterproto.string_field(5)


@dataclass
class CMsgServerToGCEvaluateToxicChatResponse(betterproto.Message):
    target_account_id: int = betterproto.uint32_field(1)
    reporter_account_id: int = betterproto.uint32_field(2)
    ban_reason: int = betterproto.uint32_field(3)
    ban_duration: int = betterproto.uint32_field(4)
    toxicity_score: float = betterproto.float_field(5)


@dataclass
class CMsgSignOutAssassinMiniGameInfo(betterproto.Message):
    winning_players: List[float] = betterproto.fixed64_field(1)
    losing_players: List[float] = betterproto.fixed64_field(2)
    arcana_owners: List[float] = betterproto.fixed64_field(3)
    assassin_won: bool = betterproto.bool_field(4)
    target_hero_id: int = betterproto.int32_field(5)
    contract_completed: bool = betterproto.bool_field(6)
    contract_complete_time: float = betterproto.float_field(7)
    pa_is_radiant: bool = betterproto.bool_field(8)


@dataclass
class CMsgServerToGCKillSummaries(betterproto.Message):
    ingameevent_id: int = betterproto.uint32_field(1)
    summaries: List[
        "CMsgServerToGCKillSummariesKillSummary"
    ] = betterproto.message_field(2)


@dataclass
class CMsgServerToGCKillSummariesKillSummary(betterproto.Message):
    killer_hero_id: int = betterproto.uint32_field(1)
    victim_hero_id: int = betterproto.uint32_field(2)
    kill_count: int = betterproto.uint32_field(3)


@dataclass
class CMsgServerToGCLockCharmTrading(betterproto.Message):
    account_id: int = betterproto.uint32_field(1)
    item_id: int = betterproto.uint64_field(2)


@dataclass
class CMsgSignOutUpdatePlayerChallenge(betterproto.Message):
    account_id: int = betterproto.uint32_field(1)
    completed: List[
        "CMsgSignOutUpdatePlayerChallengeChallenge"
    ] = betterproto.message_field(2)
    rerolled: List[
        "CMsgSignOutUpdatePlayerChallengeChallenge"
    ] = betterproto.message_field(3)
    match_id: int = betterproto.uint64_field(4)
    hero_id: int = betterproto.int32_field(5)


@dataclass
class CMsgSignOutUpdatePlayerChallengeChallenge(betterproto.Message):
    event_id: "EEvent" = betterproto.enum_field(1)
    slot_id: int = betterproto.uint32_field(2)
    sequence_id: int = betterproto.uint32_field(3)
    progress: int = betterproto.uint32_field(4)
    challenge_rank: int = betterproto.uint32_field(5)


@dataclass
class CMsgServerToGCRerollPlayerChallenge(betterproto.Message):
    account_id: int = betterproto.uint32_field(1)
    reroll_msg: "CMsgClientToGCRerollPlayerChallenge" = betterproto.message_field(2)


@dataclass
class CMsgSpendWager(betterproto.Message):
    players: List["CMsgSpendWagerPlayer"] = betterproto.message_field(1)
    event_id: "EEvent" = betterproto.enum_field(2)
    timestamp: int = betterproto.uint32_field(3)
    match_id: int = betterproto.uint64_field(4)
    server_steam_id: int = betterproto.uint64_field(5)


@dataclass
class CMsgSpendWagerPlayer(betterproto.Message):
    account_id: int = betterproto.uint32_field(1)
    wager: int = betterproto.uint32_field(2)
    wager_token_item_id: int = betterproto.uint64_field(3)


@dataclass
class CMsgSignOutXPCoins(betterproto.Message):
    players: List["CMsgSignOutXPCoinsPlayer"] = betterproto.message_field(1)
    event_id: "EEvent" = betterproto.enum_field(2)
    match_id: int = betterproto.uint64_field(3)
    timestamp: int = betterproto.uint32_field(4)


@dataclass
class CMsgSignOutXPCoinsPlayer(betterproto.Message):
    account_id: int = betterproto.uint32_field(1)
    xp_gained: int = betterproto.uint32_field(2)
    coins_spent: int = betterproto.uint32_field(3)
    wager_token_item_id: int = betterproto.uint64_field(4)
    rank_wager: int = betterproto.uint32_field(5)
    wager_streak: int = betterproto.uint32_field(6)


@dataclass
class CMsgSignOutBounties(betterproto.Message):
    bounties: List["CMsgSignOutBountiesBounty"] = betterproto.message_field(1)
    event_id: "EEvent" = betterproto.enum_field(2)
    match_id: int = betterproto.uint64_field(3)
    timestamp: int = betterproto.uint32_field(4)


@dataclass
class CMsgSignOutBountiesBounty(betterproto.Message):
    issuer_account_id: int = betterproto.uint32_field(1)
    completer_account_id: int = betterproto.uint32_field(2)
    target_account_id: int = betterproto.uint32_field(3)


@dataclass
class CMsgSignOutCommunityGoalProgress(betterproto.Message):
    event_id: "EEvent" = betterproto.enum_field(1)
    event_increments: List[
        "CMsgSignOutCommunityGoalProgressEventGoalIncrement"
    ] = betterproto.message_field(2)


@dataclass
class CMsgSignOutCommunityGoalProgressEventGoalIncrement(betterproto.Message):
    event_goal_id: int = betterproto.uint32_field(1)
    increment_amount: int = betterproto.uint32_field(2)


@dataclass
class CMsgServerToGCCloseCompendiumInGamePredictionVoting(betterproto.Message):
    match_id: int = betterproto.uint64_field(1)
    hltv_delay: int = betterproto.uint32_field(2)
    league_id: int = betterproto.uint32_field(3)


@dataclass
class CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse(betterproto.Message):
    result: bool = betterproto.bool_field(1)


@dataclass
class CMsgServerToGCCompendiumInGamePredictionResults(betterproto.Message):
    match_id: int = betterproto.uint64_field(1)
    results: List[
        "CMsgServerToGCCompendiumInGamePredictionResultsPredictionResult"
    ] = betterproto.message_field(2)
    league_id: int = betterproto.uint32_field(3)
    league_node_id: int = betterproto.uint32_field(4)


@dataclass
class CMsgServerToGCCompendiumInGamePredictionResultsPredictionResult(
    betterproto.Message
):
    prediction_id: int = betterproto.uint32_field(1)
    prediction_value: int = betterproto.uint32_field(2)
    prediction_value_is_mask: bool = betterproto.bool_field(3)


@dataclass
class CMsgServerToGCCompendiumChosenInGamePredictions(betterproto.Message):
    match_id: int = betterproto.uint64_field(1)
    predictions_chosen: List[
        "CMsgServerToGCCompendiumChosenInGamePredictionsPrediction"
    ] = betterproto.message_field(2)
    league_id: int = betterproto.uint32_field(3)


@dataclass
class CMsgServerToGCCompendiumChosenInGamePredictionsPrediction(betterproto.Message):
    prediction_id: int = betterproto.uint32_field(1)


@dataclass
class CMsgGCToGCCompendiumInGamePredictionResults(betterproto.Message):
    results: "CMsgServerToGCCompendiumInGamePredictionResults" = (
        betterproto.message_field(1)
    )


@dataclass
class CMsgServerToGCMatchPlayerItemPurchaseHistory(betterproto.Message):
    match_id: int = betterproto.uint64_field(1)
    mmr: int = betterproto.uint32_field(2)
    players: List[
        "CMsgServerToGCMatchPlayerItemPurchaseHistoryPlayer"
    ] = betterproto.message_field(3)


@dataclass
class CMsgServerToGCMatchPlayerItemPurchaseHistoryItemPurchase(betterproto.Message):
    item: int = betterproto.int32_field(1)
    gold: int = betterproto.uint32_field(2)
    net_worth: int = betterproto.uint32_field(3)
    game_time: int = betterproto.uint32_field(4)
    inventory_items: List[int] = betterproto.int32_field(5)
    talents_skilled: List[bool] = betterproto.bool_field(7)


@dataclass
class CMsgServerToGCMatchPlayerItemPurchaseHistoryPlayer(betterproto.Message):
    player_slot: int = betterproto.uint32_field(1)
    account_id: int = betterproto.uint32_field(2)
    hero_id: int = betterproto.int32_field(3)
    allied_hero_ids: List[int] = betterproto.int32_field(4)
    enemy_hero_ids: List[int] = betterproto.int32_field(5)
    item_purchases: List[
        "CMsgServerToGCMatchPlayerItemPurchaseHistoryItemPurchase"
    ] = betterproto.message_field(6)
    lane: int = betterproto.uint32_field(7)
    is_winner: bool = betterproto.bool_field(8)


@dataclass
class CMsgServerToGCMatchPlayerNeutralItemEquipHistory(betterproto.Message):
    match_id: int = betterproto.uint64_field(1)
    players: List[
        "CMsgServerToGCMatchPlayerNeutralItemEquipHistoryPlayer"
    ] = betterproto.message_field(2)


@dataclass
class CMsgServerToGCMatchPlayerNeutralItemEquipHistoryItemEquip(betterproto.Message):
    item: int = betterproto.int32_field(1)
    game_time: int = betterproto.uint32_field(2)
    inventory_items: List[int] = betterproto.int32_field(3)
    talents_skilled: List[bool] = betterproto.bool_field(4)
    available_neutral_items: List[int] = betterproto.int32_field(5)


@dataclass
class CMsgServerToGCMatchPlayerNeutralItemEquipHistoryPlayer(betterproto.Message):
    account_id: int = betterproto.uint32_field(1)
    allied_hero_ids: List[int] = betterproto.int32_field(2)
    enemy_hero_ids: List[int] = betterproto.int32_field(3)
    item_equips: List[
        "CMsgServerToGCMatchPlayerNeutralItemEquipHistoryItemEquip"
    ] = betterproto.message_field(4)
    is_winner: bool = betterproto.bool_field(5)


@dataclass
class CMsgServerToGCMatchStateHistory(betterproto.Message):
    match_id: int = betterproto.uint64_field(1)
    radiant_won: bool = betterproto.bool_field(2)
    mmr: int = betterproto.uint32_field(3)
    match_states: List[
        "CMsgServerToGCMatchStateHistoryMatchState"
    ] = betterproto.message_field(4)


@dataclass
class CMsgServerToGCMatchStateHistoryPlayerState(betterproto.Message):
    hero_id: int = betterproto.int32_field(1)
    net_worth: int = betterproto.uint32_field(2)
    level: int = betterproto.uint32_field(3)
    deaths: int = betterproto.uint32_field(4)
    respawn_time: int = betterproto.uint32_field(5)
    has_buyback: bool = betterproto.bool_field(6)
    has_aegis: bool = betterproto.bool_field(7)
    has_rapier: bool = betterproto.bool_field(8)
    distance: int = betterproto.uint32_field(9)


@dataclass
class CMsgServerToGCMatchStateHistoryTeamState(betterproto.Message):
    team: int = betterproto.uint32_field(1)
    player_states: List[
        "CMsgServerToGCMatchStateHistoryPlayerState"
    ] = betterproto.message_field(2)
    tower_health_pct: List[int] = betterproto.uint32_field(3)
    barracks_health_pct: List[int] = betterproto.uint32_field(4)
    ancient_health_pct: int = betterproto.uint32_field(5)
    glyph_cooldown: int = betterproto.uint32_field(6)
    kills: int = betterproto.uint32_field(7)
    creep_distance_safe: int = betterproto.uint32_field(8)
    creep_distance_mid: int = betterproto.uint32_field(9)
    creep_distance_off: int = betterproto.uint32_field(10)


@dataclass
class CMsgServerToGCMatchStateHistoryMatchState(betterproto.Message):
    game_time: int = betterproto.uint32_field(1)
    radiant_state: "CMsgServerToGCMatchStateHistoryTeamState" = (
        betterproto.message_field(2)
    )
    dire_state: "CMsgServerToGCMatchStateHistoryTeamState" = betterproto.message_field(
        3
    )


@dataclass
class CMsgMatchStateSteamMLEntry(betterproto.Message):
    match_state: "CMsgServerToGCMatchStateHistoryMatchState" = (
        betterproto.message_field(1)
    )
    mmr: int = betterproto.uint32_field(2)
    radiant_won: bool = betterproto.bool_field(3)


@dataclass
class CMsgLaneSelectionSteamMLEntry(betterproto.Message):
    hero_ids: List[int] = betterproto.int32_field(1)
    lanes: List[int] = betterproto.uint32_field(2)


@dataclass
class CMsgAbilitySelectionSteamMLEntry(betterproto.Message):
    mmr: int = betterproto.uint32_field(1)
    hero_id: int = betterproto.int32_field(2)
    enemy_hero_ids: List[int] = betterproto.int32_field(3)
    lane: int = betterproto.uint32_field(4)
    abilities: List[int] = betterproto.int32_field(5)
    selected_ability: int = betterproto.int32_field(6)


@dataclass
class CMsgItemPurchasePregameSteamMLEntry(betterproto.Message):
    mmr: int = betterproto.uint32_field(1)
    lane: int = betterproto.uint32_field(2)
    balance: float = betterproto.float_field(3)
    hero_id: int = betterproto.int32_field(4)
    allied_hero_ids: List[int] = betterproto.int32_field(5)
    enemy_hero_ids: List[int] = betterproto.int32_field(6)
    items: List[int] = betterproto.int32_field(7)


@dataclass
class CMsgItemPurchaseSteamMLEntry(betterproto.Message):
    mmr: int = betterproto.uint32_field(1)
    lane: int = betterproto.uint32_field(2)
    hero_id: int = betterproto.int32_field(3)
    allied_hero_ids: List[int] = betterproto.int32_field(4)
    enemy_hero_ids: List[int] = betterproto.int32_field(5)
    items: List[int] = betterproto.int32_field(6)
    items_to_be_purchased: List[int] = betterproto.int32_field(7)


@dataclass
class CMsgItemPurchaseSequenceSteamMLEntry(betterproto.Message):
    mmr: int = betterproto.uint32_field(1)
    lane: int = betterproto.uint32_field(2)
    hero_id: int = betterproto.int32_field(3)
    allied_hero_ids: List[int] = betterproto.int32_field(4)
    enemy_hero_ids: List[int] = betterproto.int32_field(5)
    items: List[int] = betterproto.int32_field(6)
    item_to_be_purchased: int = betterproto.int32_field(7)


@dataclass
class CMsgServerToGCCavernCrawlIsHeroActive(betterproto.Message):
    event_id: int = betterproto.uint32_field(1)
    account_id: int = betterproto.uint32_field(2)
    preferred_map_variant: int = betterproto.uint32_field(3)
    hero_id: int = betterproto.int32_field(4)
    turbo_mode: bool = betterproto.bool_field(5)


@dataclass
class CMsgServerToGCPlayerChallengeHistory(betterproto.Message):
    match_id: int = betterproto.uint64_field(1)
    average_rank: int = betterproto.uint32_field(2)
    challenge_records: List[
        "CMsgServerToGCPlayerChallengeHistoryPlayerChallenge"
    ] = betterproto.message_field(3)


@dataclass
class CMsgServerToGCPlayerChallengeHistoryPlayerChallenge(betterproto.Message):
    account_id: int = betterproto.uint32_field(1)
    challenge_type: "EPlayerChallengeHistoryType" = betterproto.enum_field(2)
    challenge_id1: int = betterproto.uint32_field(3)
    challenge_id2: int = betterproto.uint32_field(4)
    progress_value_start: int = betterproto.uint32_field(5)
    progress_value_end: int = betterproto.uint32_field(6)
    team_won: bool = betterproto.bool_field(7)
    audit_data: int = betterproto.uint64_field(8)
    hero_id: int = betterproto.int32_field(9)
    rank_completed: int = betterproto.uint32_field(10)


@dataclass
class CMsgServerToGCCavernCrawlIsHeroActiveResponse(betterproto.Message):
    result: bool = betterproto.bool_field(1)
    map_variant: int = betterproto.uint32_field(5)
    potential_winnings: int = betterproto.uint32_field(2)
    map_results: List[
        "CMsgServerToGCCavernCrawlIsHeroActiveResponseMapResults"
    ] = betterproto.message_field(3)
    potential_plus_shard_winnings: int = betterproto.uint32_field(4)


@dataclass
class CMsgServerToGCCavernCrawlIsHeroActiveResponseMapResults(betterproto.Message):
    path_id_completed: int = betterproto.uint32_field(1)
    room_id_claimed: int = betterproto.uint32_field(2)


@dataclass
class CMsgNeutralItemStats(betterproto.Message):
    neutral_items: List["CMsgNeutralItemStatsNeutralItem"] = betterproto.message_field(
        1
    )


@dataclass
class CMsgNeutralItemStatsNeutralItem(betterproto.Message):
    item_id: int = betterproto.int32_field(1)
    time_dropped: int = betterproto.uint32_field(2)
    team: int = betterproto.uint32_field(3)
    time_last_equipped: int = betterproto.uint32_field(4)
    time_last_unequipped: int = betterproto.uint32_field(5)
    duration_equipped: int = betterproto.uint32_field(6)


@dataclass
class CMsgGCToServerLobbyHeroBanRates(betterproto.Message):
    ban_data: List[
        "CMsgGCToServerLobbyHeroBanRatesHeroBanEntry"
    ] = betterproto.message_field(1)


@dataclass
class CMsgGCToServerLobbyHeroBanRatesHeroBanEntry(betterproto.Message):
    hero_id: int = betterproto.int32_field(1)
    ban_count: int = betterproto.uint32_field(2)
    pick_count: int = betterproto.uint32_field(3)


@dataclass
class CMsgSignOutGuildContractProgress(betterproto.Message):
    player_contracts: List[
        "CMsgSignOutGuildContractProgressPlayerContract"
    ] = betterproto.message_field(1)


@dataclass
class CMsgSignOutGuildContractProgressCompletedGuildEventContracts(betterproto.Message):
    guild_id: int = betterproto.uint32_field(1)
    event_id: int = betterproto.uint32_field(2)
    contracts: List[int] = betterproto.uint64_field(3)


@dataclass
class CMsgSignOutGuildContractProgressPlayerContract(betterproto.Message):
    account_id: int = betterproto.uint32_field(1)
    completed_contracts: List[
        "CMsgSignOutGuildContractProgressCompletedGuildEventContracts"
    ] = betterproto.message_field(2)


@dataclass
class CMsgSignOutGuildChallengeProgress(betterproto.Message):
    guild_challenges_progresses: List[
        "CMsgSignOutGuildChallengeProgressChallengeProgress"
    ] = betterproto.message_field(1)


@dataclass
class CMsgSignOutGuildChallengeProgressChallengeProgress(betterproto.Message):
    guild_id: int = betterproto.uint32_field(1)
    event_id: int = betterproto.uint32_field(2)
    challenge_instance_id: int = betterproto.uint32_field(3)
    challenge_instance_timestamp: int = betterproto.uint32_field(4)
    challenge_period_serial: int = betterproto.uint32_field(5)
    progress: int = betterproto.uint32_field(6)
    challenge_parameter: int = betterproto.uint32_field(7)


@dataclass
class CMsgSignOutMVPStats(betterproto.Message):
    match_id: int = betterproto.uint64_field(1)
    game_mode: int = betterproto.uint32_field(2)
    winning_team: int = betterproto.uint32_field(3)
    game_time: float = betterproto.float_field(4)
    players: List["CMsgSignOutMVPStatsPlayer"] = betterproto.message_field(5)


@dataclass
class CMsgSignOutMVPStatsPlayer(betterproto.Message):
    team_id: int = betterproto.uint32_field(1)
    team_networth_rank: int = betterproto.uint32_field(2)
    account_id: int = betterproto.uint32_field(3)
    player_slot: int = betterproto.uint32_field(32)
    rank: int = betterproto.uint32_field(33)
    hero_id: int = betterproto.int32_field(4)
    role: int = betterproto.uint32_field(5)
    kills: int = betterproto.int32_field(6)
    deaths: int = betterproto.int32_field(7)
    assists: int = betterproto.int32_field(8)
    xp: int = betterproto.int32_field(9)
    net_worth: int = betterproto.int32_field(10)
    support_gold_spent: int = betterproto.int32_field(12)
    wards_placed: int = betterproto.int32_field(13)
    wards_spotted_for_dewarding: int = betterproto.int32_field(14)
    camps_stacked: int = betterproto.int32_field(15)
    last_hits: int = betterproto.int32_field(16)
    denies: int = betterproto.int32_field(17)
    building_damage: int = betterproto.int32_field(19)
    other_damage: int = betterproto.int32_field(20)
    triple_kills: int = betterproto.int32_field(26)
    rampages: int = betterproto.int32_field(28)
    first_blood: int = betterproto.int32_field(31)
    kill_eater_events: List[
        "CMsgSignOutMVPStatsPlayerKillEaterEvent"
    ] = betterproto.message_field(34)
    highest_killstreak: int = betterproto.uint32_field(35)


@dataclass
class CMsgSignOutMVPStatsPlayerKillEaterEvent(betterproto.Message):
    event_type: int = betterproto.uint32_field(1)
    amount: int = betterproto.uint32_field(2)


@dataclass
class CMsgGCToServerRecordTrainingData(betterproto.Message):
    enable: bool = betterproto.bool_field(1)


@dataclass
class CMsgServerToGCGetGuildContracts(betterproto.Message):
    account_ids: List[int] = betterproto.uint32_field(1)


@dataclass
class CMsgServerToGCGetGuildContractsResponse(betterproto.Message):
    player_contracts: List[
        "CMsgServerToGCGetGuildContractsResponsePlayer"
    ] = betterproto.message_field(1)


@dataclass
class CMsgServerToGCGetGuildContractsResponseContractDetails(betterproto.Message):
    contract_id: int = betterproto.uint64_field(1)
    challenge_instance_id: int = betterproto.uint32_field(2)
    challenge_parameter: int = betterproto.uint32_field(3)
    contract_stars: int = betterproto.uint32_field(4)
    contract_slot: int = betterproto.uint32_field(5)


@dataclass
class CMsgServerToGCGetGuildContractsResponsePlayer(betterproto.Message):
    account_id: int = betterproto.uint32_field(1)
    guild_id: int = betterproto.uint32_field(2)
    event_id: "EEvent" = betterproto.enum_field(3)
    contracts: List[
        "CMsgServerToGCGetGuildContractsResponseContractDetails"
    ] = betterproto.message_field(4)


@dataclass
class CMsgMatchDiretideCandy(betterproto.Message):
    player_candy_data: List[
        "CMsgMatchDiretideCandyPlayerCandy"
    ] = betterproto.message_field(1)
    event_id: "EEvent" = betterproto.enum_field(2)


@dataclass
class CMsgMatchDiretideCandyCandyDetails(betterproto.Message):
    amount: int = betterproto.uint32_field(1)
    audit: int = betterproto.uint32_field(2)


@dataclass
class CMsgMatchDiretideCandyPlayerCandy(betterproto.Message):
    account_id: int = betterproto.uint32_field(1)
    candy_amount: int = betterproto.uint32_field(3)
    consumes_periodic_resource: bool = betterproto.bool_field(4)
    candy_breakdown: List[
        "CMsgMatchDiretideCandyCandyDetails"
    ] = betterproto.message_field(5)


@dataclass
class CMsgGCToServerCheerData(betterproto.Message):
    cheer_types: List[
        "CMsgGCToServerCheerDataCheerTypeCount"
    ] = betterproto.message_field(1)


@dataclass
class CMsgGCToServerCheerDataCheerTypeCount(betterproto.Message):
    cheer_type: int = betterproto.uint32_field(1)
    cheer_count: int = betterproto.uint32_field(2)


@dataclass
class CMsgCheerConfig(betterproto.Message):
    cheers_enabled: bool = betterproto.bool_field(1)
    is_valid_league_id: bool = betterproto.bool_field(2)
    window_duration: float = betterproto.float_field(3)
    window_bucket_count: int = betterproto.uint32_field(4)
    crowd_level_push_time: float = betterproto.float_field(6)
    crowd_level_low: int = betterproto.uint32_field(10)
    crowd_level_medium: int = betterproto.uint32_field(11)
    crowd_level_high: int = betterproto.uint32_field(12)
    cheer_scale_start: float = betterproto.float_field(13)
    cheer_scale_speed: float = betterproto.float_field(14)
    cheer_scale_push_mark: int = betterproto.uint32_field(15)
    cheer_scale_pull_mark: int = betterproto.uint32_field(16)
    cheer_scale_pct_of_max_cps_clamp: float = betterproto.float_field(17)
    cheer_scale_dampener_value: float = betterproto.float_field(21)
    cheer_scale_dampener_lerp_time: int = betterproto.uint32_field(22)
    cheer_factor_bronze: float = betterproto.float_field(18)
    cheer_factor_silver: float = betterproto.float_field(19)
    cheer_factor_gold: float = betterproto.float_field(20)


@dataclass
class CMsgGCToServerCheerConfig(betterproto.Message):
    cheer_config: "CMsgCheerConfig" = betterproto.message_field(1)


@dataclass
class CMsgServerToGCGetCheerConfig(betterproto.Message):
    league_id: int = betterproto.uint32_field(1)


@dataclass
class CMsgServerToGCGetCheerConfigResponse(betterproto.Message):
    cheer_config: "CMsgCheerConfig" = betterproto.message_field(2)


@dataclass
class CMsgGCToServerCheerScalesOverride(betterproto.Message):
    scales: List[float] = betterproto.float_field(1)


@dataclass
class CMsgGCToServerGetCheerState(betterproto.Message):
    pass


@dataclass
class CMsgCheerTypeState(betterproto.Message):
    cheer_counts: List[int] = betterproto.uint32_field(1)
    max_per_second: float = betterproto.float_field(2)
    cheer_scale: float = betterproto.float_field(3)
    override_scale: float = betterproto.float_field(4)


@dataclass
class CMsgCheerState(betterproto.Message):
    cheer_types: List["CMsgCheerTypeState"] = betterproto.message_field(1)
    radiant_crowd_level: int = betterproto.uint32_field(2)
    dire_crowd_level: int = betterproto.uint32_field(3)


@dataclass
class CMsgServerToGCReportCheerState(betterproto.Message):
    cheer_config: "CMsgCheerConfig" = betterproto.message_field(1)
    cheer_state: "CMsgCheerState" = betterproto.message_field(2)


@dataclass
class CMsgServerToGCGetStickerHeroes(betterproto.Message):
    account_ids: List[int] = betterproto.uint32_field(1)


@dataclass
class CMsgServerToGCGetStickerHeroesResponse(betterproto.Message):
    players: List[
        "CMsgServerToGCGetStickerHeroesResponsePlayer"
    ] = betterproto.message_field(1)


@dataclass
class CMsgServerToGCGetStickerHeroesResponsePlayer(betterproto.Message):
    account_id: int = betterproto.uint32_field(1)
    stickers: "CMsgStickerHeroes" = betterproto.message_field(2)


@dataclass
class CMsgGCToServerSteamLearnAccessTokensChanged(betterproto.Message):
    access_tokens: "CMsgSteamLearnAccessTokens" = betterproto.message_field(1)


@dataclass
class CMsgGCToServerSteamLearnUseHTTP(betterproto.Message):
    use_http: bool = betterproto.bool_field(1)


@dataclass
class CMsgSteamLearnMatchInfo(betterproto.Message):
    average_mmr: int = betterproto.uint32_field(1)
    radiant_won: bool = betterproto.bool_field(2)
    duration: int = betterproto.uint32_field(3)
    game_mode: int = betterproto.uint32_field(4)
    lobby_type: int = betterproto.uint32_field(5)


@dataclass
class CMsgSteamLearnMatchInfoPlayer(betterproto.Message):
    average_mmr: int = betterproto.uint32_field(1)
    team_won: bool = betterproto.bool_field(2)
    duration: int = betterproto.uint32_field(3)
    game_mode: int = betterproto.uint32_field(4)
    lobby_type: int = betterproto.uint32_field(5)
    player_mmr: int = betterproto.uint32_field(6)


@dataclass
class CMsgSteamLearnMatchHeroesV3(betterproto.Message):
    radiant_hero_ids: List[int] = betterproto.int32_field(1)
    dire_hero_ids: List[int] = betterproto.int32_field(2)
    radiant_lanes: List[int] = betterproto.uint32_field(3)
    dire_lanes: List[int] = betterproto.uint32_field(4)
    radiant_hero_facets: List[int] = betterproto.uint32_field(5)
    dire_hero_facets: List[int] = betterproto.uint32_field(6)
    radiant_positions: List[int] = betterproto.uint32_field(7)
    dire_positions: List[int] = betterproto.uint32_field(8)


@dataclass
class CMsgSteamLearnMatchHeroV3(betterproto.Message):
    hero_id: int = betterproto.int32_field(1)
    lane: int = betterproto.uint32_field(2)
    position: int = betterproto.uint32_field(8)
    allied_hero_ids: List[int] = betterproto.int32_field(3)
    enemy_hero_ids: List[int] = betterproto.int32_field(4)
    hero_facet: int = betterproto.uint32_field(5)
    allied_hero_facets: List[int] = betterproto.uint32_field(6)
    enemy_herofacets: List[int] = betterproto.uint32_field(7)


@dataclass
class CMsgSteamLearnPlayerTimedStats(betterproto.Message):
    stat_buckets: List[
        "CMsgSteamLearnPlayerTimedStatsStatBucket"
    ] = betterproto.message_field(1)


@dataclass
class CMsgSteamLearnPlayerTimedStatsStatBucket(betterproto.Message):
    game_time: float = betterproto.float_field(1)
    kills: int = betterproto.uint32_field(2)
    deaths: int = betterproto.uint32_field(3)
    assists: int = betterproto.uint32_field(4)
    experience: int = betterproto.uint32_field(5)
    last_hits: int = betterproto.uint32_field(6)
    denies: int = betterproto.uint32_field(7)
    net_worth: int = betterproto.uint32_field(8)
    idle_time: float = betterproto.float_field(9)
    commands_issued: int = betterproto.uint32_field(10)
    sentry_wards_placed: int = betterproto.uint32_field(11)
    observer_wards_placed: int = betterproto.uint32_field(12)


@dataclass
class CMsgSteamLearnMatchStateV5(betterproto.Message):
    game_time: float = betterproto.float_field(1)
    radiant_state: "CMsgSteamLearnMatchStateV5TeamState" = betterproto.message_field(2)
    dire_state: "CMsgSteamLearnMatchStateV5TeamState" = betterproto.message_field(3)


@dataclass
class CMsgSteamLearnMatchStateV5PlayerState(betterproto.Message):
    hero_id: int = betterproto.int32_field(1)
    net_worth: int = betterproto.uint32_field(2)
    level: int = betterproto.uint32_field(3)
    deaths: int = betterproto.uint32_field(4)
    respawn_time: int = betterproto.uint32_field(5)
    has_buyback: bool = betterproto.bool_field(6)
    has_aegis: bool = betterproto.bool_field(7)
    has_rapier: bool = betterproto.bool_field(8)
    distance: int = betterproto.uint32_field(9)
    hero_facet: int = betterproto.uint32_field(10)


@dataclass
class CMsgSteamLearnMatchStateV5TeamState(betterproto.Message):
    team: int = betterproto.uint32_field(1)
    player_states: List[
        "CMsgSteamLearnMatchStateV5PlayerState"
    ] = betterproto.message_field(2)
    tower_health_pct: List[int] = betterproto.uint32_field(3)
    barracks_health_pct: List[int] = betterproto.uint32_field(4)
    ancient_health_pct: int = betterproto.uint32_field(5)
    glyph_cooldown: int = betterproto.uint32_field(6)
    kills: int = betterproto.uint32_field(7)
    creep_distance_safe: int = betterproto.uint32_field(8)
    creep_distance_mid: int = betterproto.uint32_field(9)
    creep_distance_off: int = betterproto.uint32_field(10)


@dataclass
class CMsgSteamLearnItemPurchase(betterproto.Message):
    item_id: int = betterproto.int32_field(1)
    inventory_items: List[int] = betterproto.int32_field(2)
    purchase_history: List[int] = betterproto.int32_field(3)
    gold: int = betterproto.uint32_field(4)
    net_worth: int = betterproto.uint32_field(5)
    is_radiant_team: int = betterproto.uint32_field(6)
    game_time: float = betterproto.float_field(7)
    is_using_dota_plus: bool = betterproto.bool_field(8)


@dataclass
class CMsgSteamLearnPreGameItemPurchases(betterproto.Message):
    item_ids: List[int] = betterproto.int32_field(1)
    is_radiant_team: int = betterproto.uint32_field(2)
    is_using_dota_plus: bool = betterproto.bool_field(3)


@dataclass
class CMsgSteamLearnNeutralItemPurchase(betterproto.Message):
    item_id: int = betterproto.int32_field(1)
    tier: int = betterproto.uint32_field(2)
    is_radiant_team: int = betterproto.uint32_field(3)
    is_using_dota_plus: bool = betterproto.bool_field(4)


@dataclass
class CMsgSteamLearnAbilitySkill(betterproto.Message):
    ability_id: int = betterproto.int32_field(1)
    skilled_abilities: List[int] = betterproto.int32_field(2)
    game_time: float = betterproto.float_field(3)
    is_using_dota_plus: bool = betterproto.bool_field(4)


@dataclass
class CMsgSteamLearnEarlyGameItemPurchases(betterproto.Message):
    item_ids: List[int] = betterproto.int32_field(1)


@dataclass
class CMsgSteamLearnEarlyGameItemPurchasesV2(betterproto.Message):
    item_ids: List[int] = betterproto.int32_field(1)
    other_item_ids: List[int] = betterproto.int32_field(2)


@dataclass
class CMsgSteamLearnLateGameItemPurchases(betterproto.Message):
    item_ids: List[int] = betterproto.int32_field(1)


@dataclass
class CMsgSteamLearnLateGameItemPurchasesV2(betterproto.Message):
    item_ids: List[int] = betterproto.int32_field(1)
    other_item_ids: List[int] = betterproto.int32_field(2)


@dataclass
class CMsgSteamLearnWardPlacement(betterproto.Message):
    ward_loc: "CMsgSteamLearnWardPlacementLocation" = betterproto.message_field(1)
    existing_ward_locs: List[
        "CMsgSteamLearnWardPlacementLocation"
    ] = betterproto.message_field(2)
    team: int = betterproto.uint32_field(3)


@dataclass
class CMsgSteamLearnWardPlacementLocation(betterproto.Message):
    x: float = betterproto.float_field(1)
    y: float = betterproto.float_field(2)


@dataclass
class CMsgSignOutMuertaMinigame(betterproto.Message):
    event_game_data: bytes = betterproto.bytes_field(1)


@dataclass
class CMsgSignOutMapStats(betterproto.Message):
    players: List["CMsgSignOutMapStatsPlayer"] = betterproto.message_field(1)
    global_stats: "CMsgMapStatsSnapshot" = betterproto.message_field(2)


@dataclass
class CMsgSignOutMapStatsPlayer(betterproto.Message):
    account_id: int = betterproto.uint32_field(1)
    personal_stats: "CMsgMapStatsSnapshot" = betterproto.message_field(2)


@dataclass
class CMsgServerToGCNewBloomGift(betterproto.Message):
    defindex: int = betterproto.uint32_field(1)
    gifter_account_id: int = betterproto.uint32_field(2)
    target_account_ids: List[int] = betterproto.uint32_field(3)


@dataclass
class CMsgServerToGCNewBloomGiftResponse(betterproto.Message):
    result: "ENewBloomGiftingResponse" = betterproto.enum_field(1)
    received_account_ids: List[int] = betterproto.uint32_field(2)


@dataclass
class CMsgSignOutOverworld(betterproto.Message):
    players: List["CMsgSignOutOverworldPlayer"] = betterproto.message_field(1)
    event_id: "EEvent" = betterproto.enum_field(2)


@dataclass
class CMsgSignOutOverworldPlayer(betterproto.Message):
    account_id: int = betterproto.uint32_field(1)
    overworld_id: int = betterproto.uint32_field(2)
    desired_token_rewards: List[int] = betterproto.uint32_field(3)
